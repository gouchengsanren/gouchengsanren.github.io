<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>hexo的迁移</title>
    <url>/2020/04/06/hexo%E7%9A%84%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<p>由于hexo deploy的是编译生成的网页静态文件（hexo init下的.git_deploy）。<br>当更换电脑，由于没有源文件，我们没法更新博文。<br>所以有必要同时对hexo源文件进行备份（其他电脑可随时获取），并能快速恢复hexo环境。<br>本文参考大多数人的做法，将hexo源文件备份至github。</p>
<a id="more"></a>

<h2 id="在github-io仓中新建hexo分支管理源码"><a href="#在github-io仓中新建hexo分支管理源码" class="headerlink" title="在github.io仓中新建hexo分支管理源码"></a>在github.io仓中新建hexo分支管理源码</h2><hr>
<p>为了便于管理、维护（hexo d和git push源码在一个目录下操作），我们复用github.io仓<br>，新建一个分支 <code>hexo</code> 用于源码的管理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gouchengsanren.github.io - master（静态网页文件）</span><br><span class="line">                         \</span><br><span class="line">                           hexo（hexo源码）</span><br></pre></td></tr></table></figure>

<h3 id="创建hexo分支"><a href="#创建hexo分支" class="headerlink" title="创建hexo分支"></a>创建hexo分支</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/hexo%E7%9A%84%E8%BF%81%E7%A7%BB-%E5%88%9B%E5%BB%BAhexo%E5%88%86%E6%94%AF.png?raw=true" class="">


<h3 id="添加hexo源文件"><a href="#添加hexo源文件" class="headerlink" title="添加hexo源文件"></a>添加hexo源文件</h3><p>拉下github.io的代码：<br><code>git clone git@github.com:gouchengsanren/gouchengsanren.github.io.git</code></p>
<p>删除 <code>.git</code> 以外的其他文件：<br><code>rm -rf !(.git)</code></p>
<p>拷贝hexo源文件到本目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp -rf &lt;hexo源文件根目录&gt;&#x2F;* .</span><br><span class="line">cp &lt;hexo源文件根目录&gt;&#x2F;.gitignore .</span><br></pre></td></tr></table></figure>

<p>删除其他的 <code>.git</code> 目录（因为git不允许仓库嵌套）：<br><code>find . -name .git</code><br>通常theme下的主题是git clone下来的，需要删除。</p>
<p>添加并上传：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;[ADD] 添加hexo源文件&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<br>

<h2 id="本地快速恢复hexo环境"><a href="#本地快速恢复hexo环境" class="headerlink" title="本地快速恢复hexo环境"></a>本地快速恢复hexo环境</h2><hr>
<p>在新环境下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:gouchengsanren&#x2F;gouchengsanren.github.io.git</span><br><span class="line">cd gouchengsanren.github.io</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>至此，环境就恢复了。<br><br></p>
<h2 id="需要提交的内容"><a href="#需要提交的内容" class="headerlink" title="需要提交的内容"></a>需要提交的内容</h2><hr>
<p>除了 <code>hexo d</code> 提交网页静态文件到 <code>master</code> 分支。<br>还需要 <code>git add</code> 和 <code>git push</code> 源文件到 <code>hexo</code> 分支。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>gcc</title>
    <url>/2020/04/12/gcc/</url>
    <content><![CDATA[<p>gcc的一些基础知识。<br>编译到底做了一些什么，编译时的注意事项等等。</p>
<a id="more"></a>

<p><strong>头文件的位置</strong><br>像 <code>stdio.h</code> 在编译器中的 <code>include</code> 目录。<br>自己需要的头文件，编译时用 <code>-I</code> 指定，比如 <code>-I ./</code><br><br></p>
<p><strong>库的位置</strong><br>像 <code>printf</code> 函数，都在事先编好的库中。库在编译器中的 <code>lib</code> 目录。<br>编译时，</p>
<ul>
<li>用 <code>-lxxx</code> 指定需要的库，编译器会去 <code>lib</code> 、 <code>usr/lib</code> 目录下找叫 <code>libxxx.so</code><br>或者 <code>libxxx.so.数字</code> 的库文件。</li>
<li>用 <code>-L xxx</code> 指定库的路径。<br>
<br>

</li>
</ul>
<p><strong>GCC的使用</strong><br>韦老师团队写的下面这篇文档非常好。<br><a href="https://github.com/100askTeam/01_all_series_quickstart/blob/master/04_%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8_%E6%AD%A3%E5%BC%8F%E5%BC%80%E5%A7%8B/01_%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/doc_pic/01.%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.docx" target="_blank" rel="noopener">01.嵌入式Linux应用开发基础知识.docx</a></p>
<p>最初的程序是程序员对着巨大的机器插拔线缆。<br>之后有了纸带打孔编程，指代上的洞代表01，一条纸带就是要给程序。<br>再之后，就用一段特定的代码来表示一段特定的01串。这就是汇编语言。<br>再往后，就出现了c等高级语言。</p>
]]></content>
      <categories>
        <category>编译</category>
      </categories>
  </entry>
  <entry>
    <title>linux启动流程</title>
    <url>/2020/04/12/linux%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>梳理linux的启动流程。</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">windows             linux</span><br><span class="line">    bios                bootloader(uboot)</span><br><span class="line">    | 启动              | 启动</span><br><span class="line">    windos              linux内核(内核、驱动)</span><br><span class="line">    | 识别              | 识别</span><br><span class="line">    c盘                 根文件系统(自带的app、我们的app)</span><br><span class="line">    | 运行              | 启动</span><br><span class="line">    app                 app</span><br></pre></td></tr></table></figure>
<br>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux目录结构</title>
    <url>/2020/04/12/linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>介绍linux的目录结构。</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">linux目录结构</span><br><span class="line">|-bin           基本命令，所有用户可使用（与开机有关，就是系统启动要用的）</span><br><span class="line">|-boot          启动文件，比如内核等</span><br><span class="line">|-dev           设备文件</span><br><span class="line">|-etc           配置文件</span><br><span class="line">|-home          家目录</span><br><span class="line">|-lib           库（&#x2F;bin &#x2F;sbin下的app用的库，&#x2F;usr&#x2F;bin &#x2F;usr&#x2F;sbin下的也可以放这里，没有限制）</span><br><span class="line">|-media         插上u盘等外设时会挂在到该目录</span><br><span class="line">|-mnt           用来挂在其他文件系统</span><br><span class="line">|-opt           可选程序</span><br><span class="line">|-proc          挂载虚拟的proc文件系统，可以查看各进程信息（proc，其实就是process，但现在</span><br><span class="line">                proc内容很多了</span><br><span class="line">|-root          root用户的家目录</span><br><span class="line">|-sbin          基本的系统命令，系统管理员才能使用（与开机有关，就是系统启动要用的）</span><br><span class="line">|-sys           用来挂载虚拟的sys文件系统，可查看系统信息</span><br><span class="line">|-tmp           临时目录，存放临时文件</span><br><span class="line">|-usr           unix software resource，存放可分享的与不可变动的数据（usr和var是一对，</span><br><span class="line">                usr的不可变动指开机后还在的。相对的，var是变动的，开机后就没了）</span><br><span class="line">|   |-bin       绝大部分用户可使用的指令（与开机无关）</span><br><span class="line">|   |-include   头文件</span><br><span class="line">|   |-lib       库</span><br><span class="line">|   |-local     系统管理员在本机自行安装、下载的软件</span><br><span class="line">|   |-sbin      非系统正常运行所需要的系统命令</span><br><span class="line">|   |-share     放置共享文件的地方，比如&#x2F;usr&#x2F;share&#x2F;man里存放帮助文件</span><br><span class="line">|   |-src       源码</span><br><span class="line">|-var           主要针对常态性变动的文件，包括缓存（cache）、log文件等</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>man</title>
    <url>/2020/04/12/man/</url>
    <content><![CDATA[<p>记录man的基础知识，常用的指令、系统调用等等的说明。</p>
<a id="more"></a>

<p><code>man man</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1   Executable programs or shell commands</span><br><span class="line">2   System calls (functions provided by the kernel)</span><br><span class="line">3   Library calls (functions within program libraries)</span><br><span class="line">4   Special files (usually found in &#x2F;dev)</span><br><span class="line">5   File formats and conventions eg &#x2F;etc&#x2F;passwd</span><br><span class="line">6   Games</span><br><span class="line">7   Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)</span><br><span class="line">8   System administration commands (usually only for root)</span><br><span class="line">9   Kernel routines [Non standard]</span><br></pre></td></tr></table></figure>
<p>man这本书有9本（默认从第1本开始找，依次往后）：</p>
<ul>
<li>第一本讲系统指令<br>比如 <code>man ascii</code> 、<code>man sed</code> 等<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SED(1)                                            User Commands                                            SED(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       sed - stream editor for filtering and transforming text</span><br></pre></td></tr></table></figure>
左上角的 <code>SED(1)</code> 这个1就是第几本。</li>
<li>第二本讲系统调用<br>比如 <code>man 2 open</code> 、 <code>man select</code> 等<br>如果 <code>open</code> 不指定 <code>2</code> ，那么 <code>man</code> 默认查询的是 <code>openvt</code>。<br>而 <code>select</code> 在第一本书中没有类似的。</li>
<li>[FIX ME]<br>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>shell</title>
    <url>/2020/04/12/shell/</url>
    <content><![CDATA[<p>记录shell的基本语法、常用的使用技巧等。</p>
<a id="more"></a>

<p><strong>不一定非得写shell脚本再执行，可以直接执行</strong><br><code>for((i=0;i&lt;10;i++));do echo $i;done</code><br><br><br><strong>xargs cp结合使用</strong><br><code>find . -name &quot;*&quot; | xargs -i cp {}  /home/users/</code><br><br><br><strong>删除除了某个/某些文件外的其他文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;a1.c</span><br><span class="line">&gt;a2.c</span><br><span class="line">&gt;a3.c</span><br><span class="line"></span><br><span class="line">rm -rf !(a1*|a3*)</span><br></pre></td></tr></table></figure>
<p>结果就是，保留了 <code>a1.c</code>、 <code>a3.c</code>，删除了 <code>a2.c</code> 。<br><br></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu问题汇总</title>
    <url>/2020/04/12/ubuntu%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>记录常见的ubuntu使用过程中的问题，包括一些配置等。</p>
<a id="more"></a>

<h2 id="A-start-job-is-running-for-wait-for-network-to-be-Configured"><a href="#A-start-job-is-running-for-wait-for-network-to-be-Configured" class="headerlink" title="A start job is running for wait for network to be Configured"></a>A start job is running for wait for network to be Configured</h2><p>ubuntu 18.04<br>开机时会卡在这一步，原因应该是网络不通。<br>解决方式：<br><code>vim /etc/systemd/system/network-online.target.wants/systemd-networkd-wait-online.service</code><br>在[Service]标签下增加：<br><code>TimeoutStartSec=2sec</code><br><br></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>串口</title>
    <url>/2020/04/12/%E4%B8%B2%E5%8F%A3/</url>
    <content><![CDATA[<p>本post介绍所有的串口。如果后续发现内容过多，不便于浏览，会对内容做拆分。<br>uart、spi、i2c等各单独一个post。</p>
<a id="more"></a>

<p>串口电平有两种：TTL，RS232（传统的9针串口）。</p>
]]></content>
      <categories>
        <category>bsp</category>
      </categories>
  </entry>
  <entry>
    <title>知行合一</title>
    <url>/2020/04/18/%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80/</url>
    <content><![CDATA[<p>记录自己对 <code>知行合一</code> 的理解和感悟。</p>
<a id="more"></a>

<h2 id="大众的理解"><a href="#大众的理解" class="headerlink" title="大众的理解"></a>大众的理解</h2><p>知行合一，大家都听过，但大多数人的理解和王阳明讲的还是有很大差距。<br>绝大对数人的理解是：</p>
<ul>
<li>知道，但不去做，跟不知道一样</li>
<li>不知道，就去做，做了等于白做</li>
</ul>
<p>强调，做事情前要先了解相关的知识。光了解知识不行，得付出实践。</p>
<p>这样的理解是“对”的（注意我打的引号），但为什么我们就做不到呢。<br>我也在思考，我想原因是残酷的：</p>
<ul>
<li>我们所认为的 <code>知道</code> 其实是 <code>不知道</code> ，只是半瓶醋晃荡。<br>我们做事时，明明是我做过的事，为什么还是 <code>不会</code> ，总是 <code>犹豫</code> 、<br><code>不果断</code> ，甚至还要 <code>重新学一遍</code> 呢！！！<br><em>不论是生活中，还是工作中，你仔细想想。这种情况比比皆是。</em></li>
<li>不论学什么，总想先学了再说，永远动不起来。<br>结果就是又回到上面的一点！！！</li>
</ul>
<p>了解阳明心学后，给了我很大的冲击，醍醐灌顶。<br><br></p>
<h2 id="先贤的理解"><a href="#先贤的理解" class="headerlink" title="先贤的理解"></a>先贤的理解</h2><p>我们先来看看先贤们是怎么看待 <code>知行</code> 的。</p>
<p><strong>尚书</strong><br><code>知之匪艰 行之惟艰</code><br>知道并不难，行动才难。<br><br></p>
<p><strong>知礼大师</strong><br><code>智为行本则行借智生 行能成智则智借行成</code><br>智慧是行动的根本，反过来，行动能成（我的理解是创造、完善）智慧。<br><br></p>
<p><strong>朱熹</strong><br><code>知之愈明则行之愈笃 行之愈笃则知之益明</code><br>朱文公讲的更进一步了。<br>知道的越明了，行动起来越切实。反过来，行动越切实，知道的更明了。<br>朱老爷子讲的太棒了。<br><br></p>
<p>不论是佛教大师，还是理学大师，他们都认识到：<br><code>知、行，是相辅相成的</code><br>知能指导行，行的反馈能不断完善知。</p>
<p>但很奇怪，至少对我来说是这样。我确确实实读懂了这些话，但还是陷入<br>不能行动起来的尴尬境遇。<br>到底问题出在哪？<br><br></p>
<h2 id="阳明心学-知行合一"><a href="#阳明心学-知行合一" class="headerlink" title="阳明心学 - 知行合一"></a>阳明心学 - 知行合一</h2><p>理解了知礼、朱熹的话，我也去努力实践了，但仍然没法做到 <code>行必笃</code> 。<br>工作中、生活中，总是会范同样的错误，被请教问题时，总会出现解释不清的情况。<br>这就像一个泥潭一样，没法脱身。</p>
<p>直到，我遇到了 <code>王阳明</code> ，我遇到了 <code>阳明心学</code> 。</p>
<p>有不少人认为王阳明被过度神话，但对我来说，他和他的心学确确实实是我前进道路<br>中出现的一盏明灯。<br>我的心不再浮躁，变得平和。<br>我渐渐忽略他人对我的看法，由他人审视，变为自我审视。<br>我的一切行动不再漫无目的，心不再变的不安。<br>我对他人、社会的看法甚至逐渐有了一种“上帝视角”。</p>
<p><strong>谁是圣人</strong><br>阳明龙场悟道，参悟：<br><code>圣人之道吾性具足 不假外求</code><br><code>向之求理于事物者误也</code><br>人人本身就具备成为圣人的品质，拿其他事物来衡量自己，谬误。</p>
<p>当时读到这句话，后背一凉，茅塞顿开。<br>我们一直都在跟别人比，从小的教育就是竞争，竞争，竞争。<br>我们成功的标杆永远是别人。</p>
<p>当我们看到其他人会这个，会那个，懂这个，懂那个时，总想着我不能被比下去，<br>我也要去学。<br>现在回想，这么做对绝大多数人是错误的：</p>
<ul>
<li>你想去学的时候，你是不是放下了手头正在做的事。<br>这些正在做的事，你做好了吗？你真的会了吗？下次再让你做，你会不犯错的<br>把它做好吗？<br>这些你正在做，需要做的都没有学会，都还只是半瓶醋，你就半途而废了！！！</li>
<li>不但上面的半途而废了，你羡慕其他人的，发誓要学的，最后你学到了吗？？？</li>
</ul>
<p>让我们换个视角。<br>站在旁边看自己做事的不再是别人（你的亲朋好友、你的同事领导），而是你自己。<br>想象一下，你灵魂脱壳，站在旁边审视你自己。<br>我现在做的好不好是由我自己决定的，我主宰我自己。</p>
<p><strong>知行合一</strong><br>当我做到，我就是圣人，我的人生由我自己主宰时。我的心里障碍已经完全不存在了。<br>我甚至开始以上帝视角观察这个社会，观察其他人。<br>我能做到专注于自己的事上，完全不被身边的环境干扰。那些干扰（同事的讨论等等）<br>逐渐逐渐被我漠视了。自身进入了一种 <code>心流</code> 模式。</p>
<p>当能做到这一步时，是时候谈谈阳明先生的 <code>知行合一</code> 了。</p>
<p>不论是佛学、理学，他们都把 <code>知</code> 和 <code>行</code> 分开了。<br><em>这也是我们始终做不到 <code>知</code> 的原因</em><br>我们付诸实践，完成了生活、工作中的任务，就认为自己懂了，已经知了。其实完全<br>没有到知的地步。你很可能只是在照猫画虎抄作业而已。<br>但我们总会给自己打上一个，这块我会了，的标签。<br>这个错觉是谁给的？行，给的。我以前做过，既然以前做过，这次我也会。很可能是<br>再抄一次作业。</p>
<p>问题到底在哪？再问一次自己。<br>是因为知、行分开了。</p>
<p>王阳明提出：<br><code>知之真切笃实处即是行 行之明觉精察处即是知 知行工夫本不可离</code></p>
<p>对知识了解的明明白白、分毫不差，那才是行。<br>要做到明明白白、分毫不差，你不去行是不可能呢。经历了很多行，才能做到分毫不差。<br>明觉精察，就是做事情，非常清晰，一丝不乱，能类似于本能了。<br>你仔细回想，当别人问你一个知识点时，你还需要想一想，那就是其实还没懂，似懂非懂！<br>你只有脱口而出，100%确定的讲出来，那才是懂。</p>
<p>这就是知行合一。</p>
<p>当我们能做到，做事处于 <code>心流</code> 模式，能做到 <code>自我审视</code> ，能坚定不渝的<br>完成每一个 <code>知行</code> ，能以 <code>上帝视角</code> 审视周遭。你会得到一种超然的感觉。</p>
]]></content>
      <categories>
        <category>阳明心学</category>
      </categories>
  </entry>
</search>
