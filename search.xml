<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>SMA/EMA</title>
    <url>/2020/10/08/SMA-EMA/</url>
    <content><![CDATA[<p>SMA和EMA的公式和含义。</p>
<blockquote>
<p>注，我用的行情软件是老虎，公式都是对应老虎里的。</p>
</blockquote>
<a id="more"></a>
<br>

<h2 id="SMA"><a href="#SMA" class="headerlink" title="SMA"></a>SMA</h2><p>即大多数软件里的MA，简单移动平均。<br>所有人都知道，简单归简单，还是把它写出来。</p>
<h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><p align="left">
$$\begin{aligned}
MA=\frac{\sum_{i=1}^N{CLOSE_i}}{N}
\end{aligned}$$
</p>

<h3 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h3><p>最近N天的收盘价相加除以N。</p>
<p>它有缺点，《以交易为生》一书中也提到过：<br><code>SMA会报警两次（看门狗会叫两次）</code>。今天的叫一次，N日前的价格被去掉了，也叫了一次。<br>它的公式，让它计算了N日前的收盘价（这个价格实际上影响很小）。<br>不过它仍然是重要的指标，因为用的人多。<br>雷公包括我看的几本书的作者都强调，我们赚的是趋势的钱。不用管趋势的对错，只需要跟着趋势走。<br><br></p>
<h2 id="EMA"><a href="#EMA" class="headerlink" title="EMA"></a>EMA</h2><p>指数移动平均。<br>SMA的改良版，越近的交易日，它的收盘价占比更大。它显然比MA合理（单纯从指标的定义上讲）。</p>
<h3 id="公式-1"><a href="#公式-1" class="headerlink" title="公式"></a>公式</h3><p align="left">
$$\begin{aligned}
EMA&=CLOSE*K+REF(EMA,1)*(1-K)\\
K&=\frac{2}{N+1}
\end{aligned}$$
</p>

<h3 id="含义-1"><a href="#含义-1" class="headerlink" title="含义"></a>含义</h3><p>当天收盘价占比K，前一天的EMA占比（1-K）。这样一来，越接近今天的收盘价占比越重。</p>
<blockquote>
<p>雷公做了简单的总结<br>价在线上，线向上<br>价在线下，线向下<br>所见即所得</p>
</blockquote>
<p>从公式定义看，貌似雷公讲的不对，因为EMA只是当天收盘价占比高而已，如果N比较大，那么当天收盘价的影响就很小，并不一定使EMA均线改变方向。<br><strong>但从历史数据看，EMA5和EMA20我找不到反例!</strong><br>找不到反例，截止现在它就是真理。直到市场扇我一巴掌。</p>
<p><strong>交易计划中，只应该做SMA和EMA双均线都拐头向上的行情。</strong><br>k线图中，应该同时标出MA和EMA。以及20和60的抵扣价。（抵扣价在老虎中一直找不到好方法，只能通过REFX全部画出来）</p>
<br>

]]></content>
      <categories>
        <category>交易</category>
      </categories>
  </entry>
  <entry>
    <title>github图片无法显示问题</title>
    <url>/2020/10/11/github%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>把github作为图床使用，有时候能显示，有时候不显示。</p>
<a id="more"></a>


<p>在 <code>hosts</code> 中添加如下内容：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> GitHub Start</span></span><br><span class="line">192.30.253.112    Build software better, together </span><br><span class="line">192.30.253.119    gist.github.com</span><br><span class="line">151.101.184.133    assets-cdn.github.com</span><br><span class="line">151.101.184.133    raw.githubusercontent.com</span><br><span class="line">151.101.184.133    gist.githubusercontent.com</span><br><span class="line">151.101.184.133    cloud.githubusercontent.com</span><br><span class="line">151.101.184.133    camo.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars0.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars1.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars2.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars3.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars4.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars5.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars6.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars7.githubusercontent.com</span><br><span class="line">151.101.184.133    avatars8.githubusercontent.com</span><br><span class="line"><span class="meta">#</span><span class="bash"> GitHub End</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>git</category>
      </categories>
  </entry>
  <entry>
    <title>gcc</title>
    <url>/2020/04/12/gcc/</url>
    <content><![CDATA[<p>gcc的一些基础知识。<br>编译到底做了一些什么，编译时的注意事项等等。</p>
<a id="more"></a>

<h2 id="头文件的位置"><a href="#头文件的位置" class="headerlink" title="头文件的位置"></a>头文件的位置</h2><p>像 <code>stdio.h</code> 在编译器中的 <code>include</code> 目录。<br>自己需要的头文件，编译时用 <code>-I</code> 指定，比如 <code>-I ./</code><br><br></p>
<h2 id="库的位置"><a href="#库的位置" class="headerlink" title="库的位置"></a>库的位置</h2><p>像 <code>printf</code> 函数，都在事先编好的库中。库在编译器中的 <code>lib</code> 目录。<br>编译时，</p>
<ul>
<li>用 <code>-lxxx</code> 指定需要的库，编译器会去 <code>lib</code> 、 <code>usr/lib</code> 目录下找叫 <code>libxxx.so</code><br><code>libxxx.so.数字</code> <code>libxxx.a</code> 的库文件。</li>
<li>用 <code>-L xxx</code> 指定库的路径。<br>
<br>

</li>
</ul>
<h2 id="GCC的编译过程"><a href="#GCC的编译过程" class="headerlink" title="GCC的编译过程"></a>GCC的编译过程</h2><p>韦老师团队写的下面这篇文档非常好。<br><a href="https://github.com/100askTeam/01_all_series_quickstart/blob/master/04_%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8_%E6%AD%A3%E5%BC%8F%E5%BC%80%E5%A7%8B/01_%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/doc_pic/01.%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.docx" target="_blank" rel="noopener">01.嵌入式Linux应用开发基础知识.docx</a></p>
<p>最初的程序是程序员对着巨大的机器插拔线缆。<br>之后有了纸带打孔编程，指代上的洞代表01，一条纸带就是要给程序。<br>再之后，就用一段特定的代码来表示一段特定的01串。这就是汇编语言。<br>再往后，就出现了c等高级语言。</p>
<p>对老师的文档做下摘要和总结。</p>
<p>一个c/cpp文件的编译分为4步：</p>
<ul>
<li>1）预处理，preprocessing。</li>
<li>2）编译，compilation。</li>
<li>3）汇编，assembly。</li>
<li>4）链接，linking。</li>
</ul>
<br>

<h3 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h3><p>在c/cpp中，以 <code>#</code> 开头的都叫做 <code>预处理命令</code> ，包括 <code>#include</code> <code>#define</code> <code>#if</code> 等。<br>预处理要做的就是将它们展开或选择需要编译的代码。</p>
<p>例：<br><code>gcc -E -o main.i main.c -I ./</code><br>预处理不加 <code>-o</code> 选项时，会以标准输出的形式打出来。<br>预处理，需要 <code>-I</code> 。一但 <code>.i</code> 文件生成了，后续的编译就不需要再指定 <code>-I</code> 了。<br><br></p>
<h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>代码决定后，正式将这些c/cpp代码转换成汇编代码。<br>用到的工具为 <code>cc1</code> 。</p>
<p>例：<br><code>gcc -S main.i</code> 或者 <code>gcc -S -o main.s main.i</code><br>指不指定输出都可以。不指定，默认就是*.s。<br><br></p>
<h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><p>汇编就是将汇编代码转换成机器码。<br>用到的工具为 <code>as</code> 。</p>
<p>例：<br><code>gcc -c main.s</code> 或者 <code>gcc -c -o main.o main.s</code><br>指不指定输出都可以。不指定，默认就是*.o。<br><br></p>
<h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>链接就是将多个 <code>.o文件</code> <code>.so文件</code> 链接起来，生成app。<br>用到的工具为 <code>ld</code> 或者 <code>collect2</code> 。</p>
<p>例：<br><code>gcc -o main main.o sub.o</code><br>这里就必须指定了，否则默认生成的是 <code>a.out</code> 。<br><br></p>
<h3 id="gcc-v"><a href="#gcc-v" class="headerlink" title="gcc -v"></a>gcc -v</h3><p>可以通过 <code>-v</code> 看到上述过程。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:~/bsp$ gcc -o main main.c sub.c -I ./ -v</span><br><span class="line">Using built-in specs.</span><br><span class="line">COLLECT_GCC=gcc</span><br><span class="line">COLLECT_LTO_WRAPPER=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper</span><br><span class="line">OFFLOAD_TARGET_NAMES=nvptx-none</span><br><span class="line">OFFLOAD_TARGET_DEFAULT=1</span><br><span class="line">Target: x86_64-linux-gnu</span><br><span class="line">Configured with: ../src/configure -v --with-pkgversion='Ubuntu 7.5.0-3ubuntu1~18.04' --with-bugurl=file:///usr/share/doc/gcc-7/README.Bugs --enable-languages=c,ada,c++,go,brig,d,fortran,objc,obj-c++ --prefix=/usr --with-gcc-major-version-only --program-suffix=-7 --program-prefix=x86_64-linux-gnu- --enable-shared --enable-linker-build-id --libexecdir=/usr/lib --without-included-gettext --enable-threads=posix --libdir=/usr/lib --enable-nls --enable-bootstrap --enable-clocale=gnu --enable-libstdcxx-debug --enable-libstdcxx-time=yes --with-default-libstdcxx-abi=new --enable-gnu-unique-object --disable-vtable-verify --enable-libmpx --enable-plugin --enable-default-pie --with-system-zlib --with-target-system-zlib --enable-objc-gc=auto --enable-multiarch --disable-werror --with-arch-32=i686 --with-abi=m64 --with-multilib-list=m32,m64,mx32 --enable-multilib --with-tune=generic --enable-offload-targets=nvptx-none --without-cuda-driver --enable-checking=release --build=x86_64-linux-gnu --host=x86_64-linux-gnu --target=x86_64-linux-gnu</span><br><span class="line">Thread model: posix</span><br><span class="line">gcc version 7.5.0 (Ubuntu 7.5.0-3ubuntu1~18.04) </span><br><span class="line">COLLECT_GCC_OPTIONS='-o' 'main' '-I' './' '-v' '-mtune=generic' '-march=x86-64'</span><br><span class="line"> /usr/lib/gcc/x86_64-linux-gnu/7/cc1 -quiet -v -I ./ -imultiarch x86_64-linux-gnu main.c -quiet -dumpbase main.c -mtune=generic -march=x86-64 -auxbase main -version -fstack-protector-strong -Wformat -Wformat-security -o /tmp/ccZkhzNQ.s</span><br><span class="line">GNU C11 (Ubuntu 7.5.0-3ubuntu1~18.04) version 7.5.0 (x86_64-linux-gnu)</span><br><span class="line">    compiled by GNU C version 7.5.0, GMP version 6.1.2, MPFR version 4.0.1, MPC version 1.1.0, isl version isl-0.19-GMP</span><br><span class="line"></span><br><span class="line">GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072</span><br><span class="line">ignoring nonexistent directory "/usr/local/include/x86_64-linux-gnu"</span><br><span class="line">ignoring nonexistent directory "/usr/lib/gcc/x86_64-linux-gnu/7/../../../../x86_64-linux-gnu/include"</span><br><span class="line"><span class="meta">#</span><span class="bash">include <span class="string">"..."</span> search starts here:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">include &lt;...&gt; search starts here:</span></span><br><span class="line"> ./</span><br><span class="line"> /usr/lib/gcc/x86_64-linux-gnu/7/include</span><br><span class="line"> /usr/local/include</span><br><span class="line"> /usr/lib/gcc/x86_64-linux-gnu/7/include-fixed</span><br><span class="line"> /usr/include/x86_64-linux-gnu</span><br><span class="line"> /usr/include</span><br><span class="line">End of search list.</span><br><span class="line">GNU C11 (Ubuntu 7.5.0-3ubuntu1~18.04) version 7.5.0 (x86_64-linux-gnu)</span><br><span class="line">    compiled by GNU C version 7.5.0, GMP version 6.1.2, MPFR version 4.0.1, MPC version 1.1.0, isl version isl-0.19-GMP</span><br><span class="line"></span><br><span class="line">GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072</span><br><span class="line">Compiler executable checksum: b62ed4a2880cd4159476ea8293b72fa8</span><br><span class="line">COLLECT_GCC_OPTIONS='-o' 'main' '-I' './' '-v' '-mtune=generic' '-march=x86-64'</span><br><span class="line"> as -v -I ./ --64 -o /tmp/cc3Tp9Or.o /tmp/ccZkhzNQ.s</span><br><span class="line">GNU assembler version 2.30 (x86_64-linux-gnu) using BFD version (GNU Binutils for Ubuntu) 2.30</span><br><span class="line">COLLECT_GCC_OPTIONS='-o' 'main' '-I' './' '-v' '-mtune=generic' '-march=x86-64'</span><br><span class="line"> /usr/lib/gcc/x86_64-linux-gnu/7/cc1 -quiet -v -I ./ -imultiarch x86_64-linux-gnu sub.c -quiet -dumpbase sub.c -mtune=generic -march=x86-64 -auxbase sub -version -fstack-protector-strong -Wformat -Wformat-security -o /tmp/ccZkhzNQ.s</span><br><span class="line">GNU C11 (Ubuntu 7.5.0-3ubuntu1~18.04) version 7.5.0 (x86_64-linux-gnu)</span><br><span class="line">    compiled by GNU C version 7.5.0, GMP version 6.1.2, MPFR version 4.0.1, MPC version 1.1.0, isl version isl-0.19-GMP</span><br><span class="line"></span><br><span class="line">GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072</span><br><span class="line">ignoring nonexistent directory "/usr/local/include/x86_64-linux-gnu"</span><br><span class="line">ignoring nonexistent directory "/usr/lib/gcc/x86_64-linux-gnu/7/../../../../x86_64-linux-gnu/include"</span><br><span class="line"><span class="meta">#</span><span class="bash">include <span class="string">"..."</span> search starts here:</span></span><br><span class="line"><span class="meta">#</span><span class="bash">include &lt;...&gt; search starts here:</span></span><br><span class="line"> ./</span><br><span class="line"> /usr/lib/gcc/x86_64-linux-gnu/7/include</span><br><span class="line"> /usr/local/include</span><br><span class="line"> /usr/lib/gcc/x86_64-linux-gnu/7/include-fixed</span><br><span class="line"> /usr/include/x86_64-linux-gnu</span><br><span class="line"> /usr/include</span><br><span class="line">End of search list.</span><br><span class="line">GNU C11 (Ubuntu 7.5.0-3ubuntu1~18.04) version 7.5.0 (x86_64-linux-gnu)</span><br><span class="line">    compiled by GNU C version 7.5.0, GMP version 6.1.2, MPFR version 4.0.1, MPC version 1.1.0, isl version isl-0.19-GMP</span><br><span class="line"></span><br><span class="line">GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072</span><br><span class="line">Compiler executable checksum: b62ed4a2880cd4159476ea8293b72fa8</span><br><span class="line">sub.c: In function ‘sub_fun’:</span><br><span class="line">sub.c:3:8: warning: implicit declaration of function ‘printf’ [-Wimplicit-function-declaration]</span><br><span class="line">        printf("Sub fun!\n");</span><br><span class="line">        ^~~~~~</span><br><span class="line">sub.c:3:8: warning: incompatible implicit declaration of built-in function ‘printf’</span><br><span class="line">sub.c:3:8: note: include ‘&lt;stdio.h&gt;’ or provide a declaration of ‘printf’</span><br><span class="line">COLLECT_GCC_OPTIONS='-o' 'main' '-I' './' '-v' '-mtune=generic' '-march=x86-64'</span><br><span class="line"> as -v -I ./ --64 -o /tmp/ccA3F0W2.o /tmp/ccZkhzNQ.s</span><br><span class="line">GNU assembler version 2.30 (x86_64-linux-gnu) using BFD version (GNU Binutils for Ubuntu) 2.30</span><br><span class="line">COMPILER_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/</span><br><span class="line">LIBRARY_PATH=/usr/lib/gcc/x86_64-linux-gnu/7/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib/:/lib/x86_64-linux-gnu/:/lib/../lib/:/usr/lib/x86_64-linux-gnu/:/usr/lib/../lib/:/usr/lib/gcc/x86_64-linux-gnu/7/../../../:/lib/:/usr/lib/</span><br><span class="line">COLLECT_GCC_OPTIONS='-o' 'main' '-I' './' '-v' '-mtune=generic' '-march=x86-64'</span><br><span class="line"> /usr/lib/gcc/x86_64-linux-gnu/7/collect2 -plugin /usr/lib/gcc/x86_64-linux-gnu/7/liblto_plugin.so -plugin-opt=/usr/lib/gcc/x86_64-linux-gnu/7/lto-wrapper -plugin-opt=-fresolution=/tmp/ccskUa6D.res -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s -plugin-opt=-pass-through=-lc -plugin-opt=-pass-through=-lgcc -plugin-opt=-pass-through=-lgcc_s --build-id --eh-frame-hdr -m elf_x86_64 --hash-style=gnu --as-needed -dynamic-linker /lib64/ld-linux-x86-64.so.2 -pie -z now -z relro -o main /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/Scrt1.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crti.o /usr/lib/gcc/x86_64-linux-gnu/7/crtbeginS.o -L/usr/lib/gcc/x86_64-linux-gnu/7 -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu -L/usr/lib/gcc/x86_64-linux-gnu/7/../../../../lib -L/lib/x86_64-linux-gnu -L/lib/../lib -L/usr/lib/x86_64-linux-gnu -L/usr/lib/../lib -L/usr/lib/gcc/x86_64-linux-gnu/7/../../.. /tmp/cc3Tp9Or.o /tmp/ccA3F0W2.o -lgcc --push-state --as-needed -lgcc_s --pop-state -lc -lgcc --push-state --as-needed -lgcc_s --pop-state /usr/lib/gcc/x86_64-linux-gnu/7/crtendS.o /usr/lib/gcc/x86_64-linux-gnu/7/../../../x86_64-linux-gnu/crtn.o</span><br><span class="line">COLLECT_GCC_OPTIONS='-o' 'main' '-I' './' '-v' '-mtune=generic' '-march=x86-64'</span><br></pre></td></tr></table></figure>

<p>可以清晰的看出编译的过程。<br>其中：<br><code>/usr/lib/gcc/x86_64-linux-gnu/7/cc1</code> 生成的 <code>.s</code> ， <code>as</code> 生成的 <code>.o</code> 都位于 <code>/tmp/</code> 目录下。<br>最终链接使用的是 <code>/usr/lib/gcc/x86_64-linux-gnu/7/collect2</code> 。<br><br></p>
<h3 id="gcc-Wall"><a href="#gcc-Wall" class="headerlink" title="gcc -Wall"></a>gcc -Wall</h3><p>打开告警。<br><br></p>
<h3 id="gcc-g"><a href="#gcc-g" class="headerlink" title="gcc -g"></a>gcc -g</h3><p>以操作系统的本地格式（stabs，COFF，XCOFF，或DWARF）产生调试信息，gdb能使用这些信息。<br>我们反汇编，也必须加上 <code>-g</code> ，否则没有函数信息，看不懂汇编的就会一脸懵逼。</p>
<p>加上 <code>-g</code> 后，文件明显的就变大了。<br>例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:~/bsp$ gcc -c main.c -I ./</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ ll</span><br><span class="line">total 28</span><br><span class="line">drwxrwxr-x  2 chuck chuck 4096 Apr 18 08:42 ./</span><br><span class="line">drwxr-xr-x 17 chuck chuck 4096 Apr 18 08:16 ../</span><br><span class="line">-rw-rw-r--  1 chuck chuck  153 Apr 12 12:52 main.c</span><br><span class="line">-rw-rw-r--  1 chuck chuck 1608 Apr 18 08:42 main.o</span><br><span class="line">-rw-rw-r--  1 chuck chuck  139 Apr 12 12:51 Makefile</span><br><span class="line">-rw-rw-r--  1 chuck chuck   52 Apr 12 12:51 sub.c</span><br><span class="line">-rw-rw-r--  1 chuck chuck   19 Apr 12 12:51 sub.h</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ gcc -c main.c -I ./ -g -o a.o</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ ll</span><br><span class="line">total 36</span><br><span class="line">drwxrwxr-x  2 chuck chuck 4096 Apr 18 08:43 ./</span><br><span class="line">drwxr-xr-x 17 chuck chuck 4096 Apr 18 08:16 ../</span><br><span class="line">-rw-rw-r--  1 chuck chuck 5992 Apr 18 08:43 a.o</span><br><span class="line">-rw-rw-r--  1 chuck chuck  153 Apr 12 12:52 main.c</span><br><span class="line">-rw-rw-r--  1 chuck chuck 1608 Apr 18 08:42 main.o</span><br><span class="line">-rw-rw-r--  1 chuck chuck  139 Apr 12 12:51 Makefile</span><br><span class="line">-rw-rw-r--  1 chuck chuck   52 Apr 12 12:51 sub.c</span><br><span class="line">-rw-rw-r--  1 chuck chuck   19 Apr 12 12:51 sub.h</span><br></pre></td></tr></table></figure>
<br>


<h3 id="gcc-O"><a href="#gcc-O" class="headerlink" title="gcc -O"></a>gcc -O</h3><p>优化选项。没有搞懂的欲望。</p>
<table>
<thead>
<tr>
<th>选项</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>-O</td>
<td>不优化</td>
</tr>
<tr>
<td>-O2</td>
<td><strong>TODO</strong></td>
</tr>
<tr>
<td>-O3</td>
<td><strong>TODO</strong></td>
</tr>
</tbody></table>
<p>例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:~/bsp$ gcc -c main.c -I ./ -O2 -o main_o2.o</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ gcc -c main.c -I ./</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ gcc -c main.c -I ./ -O3 -o main_o3.o</span><br><span class="line">chuck@chuck11:~/bsp$ gcc -c main.c -I ./ -O1 -o main_o1.o</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ ll</span><br><span class="line">total 40</span><br><span class="line">drwxrwxr-x  2 chuck chuck 4096 Apr 18 08:50 ./</span><br><span class="line">drwxr-xr-x 17 chuck chuck 4096 Apr 18 08:16 ../</span><br><span class="line">-rw-rw-r--  1 chuck chuck  153 Apr 12 12:52 main.c</span><br><span class="line">-rw-rw-r--  1 chuck chuck 1608 Apr 18 08:50 main.o</span><br><span class="line">-rw-rw-r--  1 chuck chuck 1624 Apr 18 08:50 main_o1.o</span><br><span class="line">-rw-rw-r--  1 chuck chuck 1728 Apr 18 08:50 main_o2.o</span><br><span class="line">-rw-rw-r--  1 chuck chuck 1728 Apr 18 08:50 main_o3.o</span><br><span class="line">-rw-rw-r--  1 chuck chuck  139 Apr 12 12:51 Makefile</span><br><span class="line">-rw-rw-r--  1 chuck chuck   52 Apr 12 12:51 sub.c</span><br><span class="line">-rw-rw-r--  1 chuck chuck   19 Apr 12 12:51 sub.h</span><br></pre></td></tr></table></figure>
<p>随着优化等级变高，代码变多了。<br><br></p>
<h3 id="链接选项"><a href="#链接选项" class="headerlink" title="链接选项"></a>链接选项</h3><p>选项比较多，可以参考：<br><a href="https://github.com/100askTeam/01_all_series_quickstart/blob/master/04_%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8_%E6%AD%A3%E5%BC%8F%E5%BC%80%E5%A7%8B/01_%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/doc_pic/01.%E5%B5%8C%E5%85%A5%E5%BC%8FLinux%E5%BA%94%E7%94%A8%E5%BC%80%E5%8F%91%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86.docx" target="_blank" rel="noopener">01.嵌入式Linux应用开发基础知识.docx</a></p>
<h4 id="动态库和静态库"><a href="#动态库和静态库" class="headerlink" title="动态库和静态库"></a>动态库和静态库</h4><p>我们先来讲讲库。<br>库分：</p>
<ul>
<li>静态库， <code>.a</code> 文件</li>
<li>动态库， <code>.so</code> 文件</li>
</ul>
<p><strong>动态库</strong><br>通过 <code>-shared</code> 选项生成 。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:~/bsp$ gcc -shared sub.c -o libsub.so</span><br><span class="line">chuck@chuck11:~/bsp$ gcc -o main main.c -I ./ -lsub -L ./</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ ./main </span><br><span class="line">./main: error while loading shared libraries: libsub.so: cannot open shared object file: No such file or directory</span><br><span class="line">chuck@chuck11:~/bsp$ ll main</span><br><span class="line">-rwxrwxr-x 1 chuck chuck 8328 Apr 18 17:50 main*</span><br></pre></td></tr></table></figure>
<p>注意我故意列出了main的大小 <code>8328</code> 字节。<br><em><code>-shared</code> 不加 <code>-o</code> 默认生成的文件为 <code>a.out</code> ，所以一定要加 <code>-o</code> ，否则没法链接的。</em></p>
<p><strong>静态库</strong></p>
<blockquote>
<p>那么 <code>.a</code> 和 <code>.so</code> 是否仅仅是名字上的差别呢？</p>
</blockquote>
<p>我们来做个实验。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:~/bsp$ gcc -shared sub.c -o libsub.a</span><br><span class="line">chuck@chuck11:~/bsp$ ll</span><br><span class="line">total 40</span><br><span class="line">drwxrwxr-x  2 chuck chuck 4096 Apr 18 17:56 ./</span><br><span class="line">drwxr-xr-x 17 chuck chuck 4096 Apr 18 17:32 ../</span><br><span class="line">-rwxrwxr-x  1 chuck chuck 7896 Apr 18 17:56 libsub.a*</span><br><span class="line">-rwxrwxr-x  1 chuck chuck 7896 Apr 18 17:50 libsub.so*</span><br><span class="line">-rw-rw-r--  1 chuck chuck  153 Apr 12 12:52 main.c</span><br><span class="line">-rw-rw-r--  1 chuck chuck  139 Apr 12 12:51 Makefile</span><br><span class="line">-rw-rw-r--  1 chuck chuck   52 Apr 12 12:51 sub.c</span><br><span class="line">-rw-rw-r--  1 chuck chuck   19 Apr 12 12:51 sub.h</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ gcc -o main main.c -I ./ -lsub -L ./</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ ./main </span><br><span class="line">./main: error while loading shared libraries: libsub.so: cannot open shared object file: No such file or directory</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ rm libsub.so </span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ gcc -o main main.c -I ./ -lsub -L ./</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ ./main </span><br><span class="line">Main fun!</span><br><span class="line">Sub fun!</span><br><span class="line">chuck@chuck11:~/bsp$ ll main</span><br><span class="line">-rwxrwxr-x 1 chuck chuck 8328 Apr 18 17:56 main*</span><br><span class="line">chuck@chuck11:~/bsp$ diff libsub.a libsub.so</span><br><span class="line">chuck@chuck11:~/bsp$</span><br></pre></td></tr></table></figure>
<p>会发现：</p>
<ul>
<li>1）使用 <code>-shared</code> 生成 <code>.a</code> 和 <code>.so</code> 内容是一样的</li>
<li>2）链接，优先使用 <code>.so</code></li>
<li>3）链接后，使用 <code>.a</code> 链接的main是可以直接运行的！！！</li>
<li>4）<code>main</code> 的大小并没有差异，说明仍然是在运行时动态链接的</li>
</ul>
<p>我们继续实验：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:~/bsp$ cd ../</span><br><span class="line">chuck@chuck11:~$ </span><br><span class="line">chuck@chuck11:~$ cp bsp/main .</span><br><span class="line">chuck@chuck11:~$ </span><br><span class="line">chuck@chuck11:~$ ./main </span><br><span class="line">./main: error while loading shared libraries: .//libsub.a: cannot open shared object file: No such file or directory</span><br><span class="line">chuck@chuck11:~$ </span><br><span class="line">chuck@chuck11:~$ cp bsp/libsub.a .</span><br><span class="line">chuck@chuck11:~$ ./main </span><br><span class="line">Main fun!</span><br><span class="line">Sub fun!</span><br><span class="line">chuck@chuck11:~$</span><br></pre></td></tr></table></figure>
<p>也就是说，链接 <code>.a</code> 的app运行时要求库在当前目录，而链接 <code>.so</code> 的app运行时要求库在 <code>lib</code> 目录。</p>
<p>我们做下印证：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:~$ su</span><br><span class="line">Password: </span><br><span class="line">root@chuck11:/home/chuck# </span><br><span class="line">root@chuck11:/home/chuck# cp bsp/libsub.a /usr/lib/</span><br><span class="line">root@chuck11:/home/chuck# ./main </span><br><span class="line">./main: error while loading shared libraries: .//libsub.a: cannot open shared object file: No such file or directory</span><br><span class="line">root@chuck11:/home/chuck# cp bsp/libsub.so /usr/lib/</span><br><span class="line">root@chuck11:/home/chuck# ./main </span><br><span class="line">./main: error while loading shared libraries: .//libsub.a: cannot open shared object file: No such file or directory</span><br><span class="line">root@chuck11:/home/chuck#</span><br><span class="line">root@chuck11:/home/chuck# cd bsp/</span><br><span class="line">root@chuck11:/home/chuck/bsp# gcc -o main main.c -I ./ -L ./ -lsub</span><br><span class="line">root@chuck11:/home/chuck/bsp# </span><br><span class="line">root@chuck11:/home/chuck/bsp# ./main </span><br><span class="line">Main fun!</span><br><span class="line">Sub fun!</span><br></pre></td></tr></table></figure>
<p>和预期一致。</p>
<blockquote>
<p>那么静态库正确的生成方法是？</p>
</blockquote>
<p>参考：<br><a href="http://c.biancheng.net/view/7168.html" target="_blank" rel="noopener">gcc生成静态链接库</a></p>
<p>我们使用 <code>ar</code> 命令。<br><code>ar rcs + 静态库文件的名字 + 目标文件列表</code><br>事实上，ar是linux的一个备份压缩命令，它将多个文件打包成一个备份文件（归档文件），<br>反过来也可以提取。</p>
<p>参数说明：</p>
<ul>
<li><code>r</code> 用来替换库中已有的目标文件，或者加入新的目标文件</li>
<li><code>c</code> 表示创建一个库。不管库否存在，都将创建</li>
<li><code>s</code> 用来创建目标文件索引，这在创建较大的库时能提高速度</li>
</ul>
<p>我们不需要记住每个参数的含义，记住使用 <code>ar rcs</code> 即可。<br>例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:~/bsp$ gcc -c -o sub.o sub.c</span><br><span class="line">chuck@chuck11:~/bsp$ ar rcs libsub.a sub.o </span><br><span class="line">chuck@chuck11:~/bsp$ gcc -o main main.c -I ./ -L ./ -lsub</span><br><span class="line">chuck@chuck11:~/bsp$ ll</span><br><span class="line">total 44</span><br><span class="line">drwxrwxr-x  2 chuck chuck 4096 Apr 18 18:38 ./</span><br><span class="line">drwxr-xr-x 17 chuck chuck 4096 Apr 18 18:34 ../</span><br><span class="line">-rw-rw-r--  1 chuck chuck 1680 Apr 18 18:38 libsub.a</span><br><span class="line">-rwxrwxr-x  1 chuck chuck 8360 Apr 18 18:38 main*</span><br><span class="line">-rw-rw-r--  1 chuck chuck  153 Apr 12 12:52 main.c</span><br><span class="line">-rw-rw-r--  1 chuck chuck  139 Apr 12 12:51 Makefile</span><br><span class="line">-rw-rw-r--  1 chuck chuck   52 Apr 12 12:51 sub.c</span><br><span class="line">-rw-rw-r--  1 chuck chuck   19 Apr 12 12:51 sub.h</span><br><span class="line">-rw-rw-r--  1 chuck chuck 1536 Apr 18 18:38 sub.o</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ ./main </span><br><span class="line">Main fun!</span><br><span class="line">Sub fun!</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ cd ../</span><br><span class="line">chuck@chuck11:~$ cp bsp/main .</span><br><span class="line">chuck@chuck11:~$ ./main </span><br><span class="line">Main fun!</span><br><span class="line">Sub fun!</span><br><span class="line">chuck@chuck11:~$</span><br></pre></td></tr></table></figure>
<p>不论哪个目录，<code>main</code> 都可以运行。而且大小相较动态库，变大了 <code>8360</code> 。<br>这才是静态库。</p>
<blockquote>
<p><em>注意：<code>ar</code> 打包的是归档文件，即 <code>.o</code> 文件，不能直接 <code>ar .c</code></em></p>
</blockquote>
<p>错误示范：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:~/bsp$ ar rcs -o libsub.a sub.c </span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ ll</span><br><span class="line">total 28</span><br><span class="line">drwxrwxr-x  2 chuck chuck 4096 Apr 18 18:43 ./</span><br><span class="line">drwxr-xr-x 17 chuck chuck 4096 Apr 18 18:42 ../</span><br><span class="line">-rw-rw-r--  1 chuck chuck  120 Apr 18 18:43 libsub.a</span><br><span class="line">-rw-rw-r--  1 chuck chuck  153 Apr 12 12:52 main.c</span><br><span class="line">-rw-rw-r--  1 chuck chuck  139 Apr 12 12:51 Makefile</span><br><span class="line">-rw-rw-r--  1 chuck chuck   52 Apr 12 12:51 sub.c</span><br><span class="line">-rw-rw-r--  1 chuck chuck   19 Apr 12 12:51 sub.h</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ gcc -o main main.c -I ./ -L ./ -lsub</span><br><span class="line">.//libsub.a: error adding symbols: Archive has no index; run ranlib to add one</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br></pre></td></tr></table></figure>
<p>可以发现，libsub.a很小。显然sub.c并没有被编译，记住ar只是一个打包命令，它不编译。</p>
<blockquote>
<p>也就是说，<strong>静态库</strong>只是 <code>.o</code> 的打包文件而已，它不想 <code>.so</code> 那样加了其他内容。</p>
</blockquote>
<br>


<h4 id="static"><a href="#static" class="headerlink" title="-static"></a>-static</h4><blockquote>
<p>那么除了静态库，有什么办法可以把动态库直接编译进app呢？</p>
</blockquote>
<p>有。使用 <code>-static</code> 选项。<br>该选项在编译时会直接把库编译进app。</p>
<p>例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:~/bsp$ ll</span><br><span class="line">total 32</span><br><span class="line">drwxrwxr-x  2 chuck chuck 4096 Apr 19 01:08 ./</span><br><span class="line">drwxr-xr-x 17 chuck chuck 4096 Apr 18 18:51 ../</span><br><span class="line">-rwxrwxr-x  1 chuck chuck 7896 Apr 19 01:06 libsub.so*</span><br><span class="line">-rw-rw-r--  1 chuck chuck  153 Apr 12 12:52 main.c</span><br><span class="line">-rw-rw-r--  1 chuck chuck  139 Apr 12 12:51 Makefile</span><br><span class="line">-rw-rw-r--  1 chuck chuck   52 Apr 12 12:51 sub.c</span><br><span class="line">-rw-rw-r--  1 chuck chuck   19 Apr 12 12:51 sub.h</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ gcc -static -o main main.c -I ./ -L ./ -lsub</span><br><span class="line">/usr/bin/ld: cannot find -lsub</span><br><span class="line">collect2: error: ld returned 1 exit status</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ gcc -c sub.c </span><br><span class="line">chuck@chuck11:~/bsp$ ar rcs -o libsub.a sub.o </span><br><span class="line">chuck@chuck11:~/bsp$ gcc -static -o main main.c -I ./ -L ./ -lsub</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ ll</span><br><span class="line">total 868</span><br><span class="line">drwxrwxr-x  2 chuck chuck   4096 Apr 19 01:12 ./</span><br><span class="line">drwxr-xr-x 17 chuck chuck   4096 Apr 18 18:51 ../</span><br><span class="line">-rw-rw-r--  1 chuck chuck   1680 Apr 19 01:12 libsub.a</span><br><span class="line">-rwxrwxr-x  1 chuck chuck   7896 Apr 19 01:06 libsub.so*</span><br><span class="line">-rwxrwxr-x  1 chuck chuck 844760 Apr 19 01:13 main*</span><br><span class="line">-rw-rw-r--  1 chuck chuck    153 Apr 12 12:52 main.c</span><br><span class="line">-rw-rw-r--  1 chuck chuck    139 Apr 12 12:51 Makefile</span><br><span class="line">-rw-rw-r--  1 chuck chuck     52 Apr 12 12:51 sub.c</span><br><span class="line">-rw-rw-r--  1 chuck chuck     19 Apr 12 12:51 sub.h</span><br><span class="line">-rw-rw-r--  1 chuck chuck   1536 Apr 19 01:10 sub.o</span><br><span class="line">chuck@chuck11:~/bsp$</span><br></pre></td></tr></table></figure>
<p>我做了2个尝试：</p>
<ul>
<li>1）尝试用 <code>-static</code> 编译进自己的 <code>libsub.so</code> 库，但失败了。实践表明不能通过<br>   <code>-static</code> 将自己的动态库编译进app。</li>
<li>2）编出 <code>.a</code> 静态库，使用 <code>-static</code> 成功了。说明自己的静态库可以。</li>
</ul>
<p><em>注意，编出的main有 <code>844k</code></em></p>
<blockquote>
<p>难道 <code>libc</code> 默认库是静态库？不可能啊，如果是静态库，为什么现在main编出来大了整整 <code>100倍</code> ？</p>
</blockquote>
<p>我们可以通过 <code>ldd</code> 确认一个app到底使用了那些库：<br>参考：<br><a href="http://c.biancheng.net/view/7483.html" target="_blank" rel="noopener">ldd</a></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:~/bsp$ gcc -static -o main_static main.c -I ./ -L ./ -lsub</span><br><span class="line">chuck@chuck11:~/bsp$ gcc -o main_dynamic main.c -I ./ -L ./ -lsub</span><br><span class="line">chuck@chuck11:~/bsp$ ll</span><br><span class="line">total 880</span><br><span class="line">drwxrwxr-x  2 chuck chuck   4096 Apr 19 01:16 ./</span><br><span class="line">drwxr-xr-x 17 chuck chuck   4096 Apr 18 18:51 ../</span><br><span class="line">-rw-rw-r--  1 chuck chuck   1680 Apr 19 01:12 libsub.a</span><br><span class="line">-rwxrwxr-x  1 chuck chuck   7896 Apr 19 01:06 libsub.so*</span><br><span class="line">-rw-rw-r--  1 chuck chuck    153 Apr 12 12:52 main.c</span><br><span class="line">-rwxrwxr-x  1 chuck chuck   8328 Apr 19 01:16 main_dynamic*</span><br><span class="line">-rwxrwxr-x  1 chuck chuck 844760 Apr 19 01:16 main_static*</span><br><span class="line">-rw-rw-r--  1 chuck chuck    139 Apr 12 12:51 Makefile</span><br><span class="line">-rw-rw-r--  1 chuck chuck     52 Apr 12 12:51 sub.c</span><br><span class="line">-rw-rw-r--  1 chuck chuck     19 Apr 12 12:51 sub.h</span><br><span class="line">-rw-rw-r--  1 chuck chuck   1536 Apr 19 01:10 sub.o</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ ldd main_static </span><br><span class="line">    not a dynamic executable</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ ldd main_dynamic </span><br><span class="line">    linux-vdso.so.1 (0x00007fffbe917000)</span><br><span class="line">    libsub.so =&gt; not found</span><br><span class="line">    libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007fbc7afeb000)</span><br><span class="line">    /lib64/ld-linux-x86-64.so.2 (0x00007fbc7b5de000)</span><br></pre></td></tr></table></figure>
<p>我编了两个main，一个静态的（ <code>main_static</code> ），一个动态的（ <code>main_dynamic</code> ）。<br>使用 <code>ldd</code> 查看，非 <code>-static</code> 生成的main，使用的c库是 <code>libc.so.6</code> 确实是动态库。</p>
<blockquote>
<p>那自己的so和标准库的so，有什么区别呢？</p>
</blockquote>
<p>我们通过 <code>file</code> 看下文件类型：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:~/bsp$ file libsub.so </span><br><span class="line">libsub.so: ELF 64-bit LSB shared object, x86-64, version 1 (SYSV), dynamically linked, BuildID[sha1]=e4d3fd11a9247f7c75680cc54340daf8b58f4cc8, not stripped</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ file libsub.a </span><br><span class="line">libsub.a: current ar archive</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ sudo file /lib/x86_64-linux-gnu/libc.so.6 </span><br><span class="line">[sudo] password for chuck: </span><br><span class="line">/lib/x86_64-linux-gnu/libc.so.6: symbolic link to libc-2.27.so</span><br><span class="line">chuck@chuck11:~/bsp$ </span><br><span class="line">chuck@chuck11:~/bsp$ su</span><br><span class="line">Password: </span><br><span class="line">root@chuck11:/home/chuck/bsp# whereis libc-2.27.so</span><br><span class="line">libc-2.27: /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">root@chuck11:/home/chuck/bsp# </span><br><span class="line">root@chuck11:/home/chuck/bsp# file /lib/x86_64-linux-gnu/libc-2.27.so</span><br><span class="line">/lib/x86_64-linux-gnu/libc-2.27.so: ELF 64-bit LSB shared object, x86-64, version 1 (GNU/Linux), dynamically linked, interpreter /lib64/l, BuildID[sha1]=b417c0ba7cc5cf06d1d1bed6652cedb9253c60d0, for GNU/Linux 3.2.0, stripped</span><br></pre></td></tr></table></figure>
<p>除了自己的是没有去符号的，没有什么区别。</p>
<blockquote>
<p>总之，实践表明：自己的库，要想 <code>-static</code> 编进app，只能通过ar打包为静态库。</p>
</blockquote>
<blockquote>
<p>至于 <code>strip</code> 工具，我们另开篇讲。本身不在gcc的范畴。<br><br></p>
</blockquote>
]]></content>
      <categories>
        <category>compile</category>
      </categories>
  </entry>
  <entry>
    <title>hexo的迁移</title>
    <url>/2020/04/06/hexo%E7%9A%84%E8%BF%81%E7%A7%BB/</url>
    <content><![CDATA[<p>由于hexo deploy的是编译生成的网页静态文件（hexo init下的.git_deploy）。<br>当更换电脑，由于没有源文件，我们没法更新博文。<br>所以有必要同时对hexo源文件进行备份（其他电脑可随时获取），并能快速恢复hexo环境。<br>本文参考大多数人的做法，将hexo源文件备份至github。</p>
<a id="more"></a>

<h2 id="在github-io仓中新建hexo分支管理源码"><a href="#在github-io仓中新建hexo分支管理源码" class="headerlink" title="在github.io仓中新建hexo分支管理源码"></a>在github.io仓中新建hexo分支管理源码</h2><hr>
<p>为了便于管理、维护（hexo d和git push源码在一个目录下操作），我们复用github.io仓<br>，新建一个分支 <code>hexo</code> 用于源码的管理。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">gouchengsanren.github.io - master（静态网页文件）</span><br><span class="line">                         \</span><br><span class="line">                           hexo（hexo源码）</span><br></pre></td></tr></table></figure>

<h3 id="创建hexo分支"><a href="#创建hexo分支" class="headerlink" title="创建hexo分支"></a>创建hexo分支</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/hexo%E7%9A%84%E8%BF%81%E7%A7%BB-%E5%88%9B%E5%BB%BAhexo%E5%88%86%E6%94%AF.png?raw=true" class="">


<h3 id="添加hexo源文件"><a href="#添加hexo源文件" class="headerlink" title="添加hexo源文件"></a>添加hexo源文件</h3><p>拉下github.io的代码：<br><code>git clone git@github.com:gouchengsanren/gouchengsanren.github.io.git</code></p>
<p>删除 <code>.git</code> 以外的其他文件：<br><code>rm -rf !(.git)</code></p>
<p>拷贝hexo源文件到本目录：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp -rf &lt;hexo源文件根目录&gt;&#x2F;* .</span><br><span class="line">cp &lt;hexo源文件根目录&gt;&#x2F;.gitignore .</span><br></pre></td></tr></table></figure>

<p>删除其他的 <code>.git</code> 目录（因为git不允许仓库嵌套）：<br><code>find . -name .git</code><br>通常theme下的主题是git clone下来的，需要删除。</p>
<p>添加并上传：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;[ADD] 添加hexo源文件&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure>
<br>

<h2 id="本地快速恢复hexo环境"><a href="#本地快速恢复hexo环境" class="headerlink" title="本地快速恢复hexo环境"></a>本地快速恢复hexo环境</h2><hr>
<p>在新环境下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git clone git@github.com:gouchengsanren&#x2F;gouchengsanren.github.io.git</span><br><span class="line">cd gouchengsanren.github.io</span><br><span class="line">npm install</span><br><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>至此，环境就恢复了。<br><br></p>
<h2 id="需要提交的内容"><a href="#需要提交的内容" class="headerlink" title="需要提交的内容"></a>需要提交的内容</h2><hr>
<p>除了 <code>hexo d</code> 提交网页静态文件到 <code>master</code> 分支。<br>还需要 <code>git add</code> 和 <code>git push</code> 源文件到 <code>hexo</code> 分支。</p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>fasync</title>
    <url>/2020/05/30/fasync/</url>
    <content><![CDATA[<p>kernel向app异步通知，除了我们知道的netlink以外，还有一种日常工作中没有见过的方式：fasync。<br>它可以用来向app发送一个signal。app收到signal后进行一些处理。</p>
<a id="more"></a>

<h2 id="fasync"><a href="#fasync" class="headerlink" title="fasync"></a>fasync</h2><p>具体使用示例在git上，可以参考：<br><a href="https://github.com/gouchengsanren/files/tree/master/button_drv_and_app" target="_blank" rel="noopener">fasync示例（一个按键驱动）</a><br><em>注：没有写中断处理，简单写了个框架。可能后面git会更新。不影响本文</em><br>示例运行：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[root@imx6ull:&#x2F;mnt]# .&#x2F;app &amp;</span><br><span class="line">[2] 407</span><br><span class="line">[root@imx6ull:&#x2F;mnt]# [ 2938.597544] FASYNC</span><br><span class="line"></span><br><span class="line">[root@imx6ull:&#x2F;mnt]# </span><br><span class="line">[root@imx6ull:&#x2F;mnt]# </span><br><span class="line">[root@imx6ull:&#x2F;mnt]# cat &#x2F;dev&#x2F;bsp_button </span><br><span class="line">get a signal : 29</span><br><span class="line">get a signal : 29</span><br><span class="line">[root@imx6ull:&#x2F;mnt]#</span><br></pre></td></tr></table></figure>

<p>使用方式比较简单：</p>
<ul>
<li>1）声明一个 <code>fasync_struct</code> 结构体指针。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static struct fasync_struct *b_async &#x3D; NULL;</span><br></pre></td></tr></table></figure></li>
<li>2）<code>file_operations</code> 中实现 <code>fasync</code> 。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">static int button_fasync(int fd, struct file *file, int on)</span><br><span class="line">&#123;</span><br><span class="line">    pr_info(&quot;FASYNC\n&quot;);</span><br><span class="line">    return fasync_helper(fd, file, on, &amp;b_async);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>3）中断中调用 <code>kill_fasync</code> 。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">kill_fasync(&amp;b_async, SIGIO, POLL_IN);      &#x2F;&#x2F;SIGIO:29</span><br></pre></td></tr></table></figure></li>
<li>4）app中设置信号处理函数、打开设备节点、绑定fd和pid、flag增加FASYNC。<br>由于app程序短，就直接全部贴上来了。<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line"></span><br><span class="line">int fd;</span><br><span class="line"></span><br><span class="line">void my_sig_func(int signo)</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;get a signal : %d\n&quot;, signo);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char **argv)</span><br><span class="line">&#123;</span><br><span class="line">    int Oflags;</span><br><span class="line"></span><br><span class="line">    signal(SIGIO, my_sig_func);</span><br><span class="line">    fd &#x3D; open(&quot;&#x2F;dev&#x2F;bsp_button&quot;, O_RDWR);</span><br><span class="line">    fcntl(fd, F_SETOWN, getpid());         &#x2F;&#x2F;告诉内核，操作fd的是哪个pid</span><br><span class="line">    Oflags &#x3D; fcntl(fd, F_GETFL);</span><br><span class="line">    fcntl(fd, F_SETFL, Oflags | FASYNC);</span><br><span class="line"></span><br><span class="line">    while (1) </span><br><span class="line">    &#123;</span><br><span class="line">        sleep(2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>这样就可以了。</p>
<blockquote>
<p>那么它和 <code>netlink</code> 的区别是什么呢？</p>
</blockquote>
<p>也是非常明显。<br><code>fasync</code> 只能传递信号（SIGNAL），且app在收到信号后，还得再向内核查询。<br>SIGNAL以下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#define SIGHUP       1</span><br><span class="line">#define SIGINT       2</span><br><span class="line">#define SIGQUIT      3</span><br><span class="line">#define SIGILL       4</span><br><span class="line">#define SIGTRAP      5</span><br><span class="line">#define SIGABRT      6</span><br><span class="line">#define SIGIOT       6</span><br><span class="line">#define SIGBUS       7</span><br><span class="line">#define SIGFPE       8</span><br><span class="line">#define SIGKILL      9</span><br><span class="line">#define SIGUSR1     10</span><br><span class="line">#define SIGSEGV     11</span><br><span class="line">#define SIGUSR2     12</span><br><span class="line">#define SIGPIPE     13</span><br><span class="line">#define SIGALRM     14</span><br><span class="line">#define SIGTERM     15</span><br><span class="line">#define SIGSTKFLT   16</span><br><span class="line">#define SIGCHLD     17</span><br><span class="line">#define SIGCONT     18</span><br><span class="line">#define SIGSTOP     19</span><br><span class="line">#define SIGTSTP     20</span><br><span class="line">#define SIGTTIN     21</span><br><span class="line">#define SIGTTOU     22</span><br><span class="line">#define SIGURG      23</span><br><span class="line">#define SIGXCPU     24</span><br><span class="line">#define SIGXFSZ     25</span><br><span class="line">#define SIGVTALRM   26</span><br><span class="line">#define SIGPROF     27</span><br><span class="line">#define SIGWINCH    28</span><br><span class="line">#define SIGIO       29</span><br><span class="line">#define SIGPOLL     SIGIO</span><br></pre></td></tr></table></figure>
<p>而 <code>netlink</code> 可以传递任何信息。<br><br></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux启动流程</title>
    <url>/2020/04/12/linux%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/</url>
    <content><![CDATA[<p>梳理linux的启动流程。</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">windows             linux</span><br><span class="line">    bios                bootloader(uboot)</span><br><span class="line">    | 启动              | 启动</span><br><span class="line">    windos              linux内核(内核、驱动)</span><br><span class="line">    | 识别              | 识别</span><br><span class="line">    c盘                 根文件系统(自带的app、我们的app)</span><br><span class="line">    | 运行              | 启动</span><br><span class="line">    app                 app</span><br></pre></td></tr></table></figure>
<br>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>class_create和device_create</title>
    <url>/2020/05/16/class-create%E5%92%8Cdevice-create/</url>
    <content><![CDATA[<p>这两个接口的作用。</p>
<a id="more"></a>

<h2 id="class-create和device-create的结合使用"><a href="#class-create和device-create的结合使用" class="headerlink" title="class_create和device_create的结合使用"></a>class_create和device_create的结合使用</h2><p>在字符设备驱动中我们会同时使用这两个接口。<br>示例：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> __init <span class="title">miscdrv_entry</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ret;</span><br><span class="line"></span><br><span class="line">    major = register_chrdev(<span class="number">0</span>, DRVNAME, &amp;miscdrv);              <span class="comment">//#define DRVNAME "miscdev"</span></span><br><span class="line">    pr_info(<span class="string">"[%s] major: %d\n"</span>, __func__, major);</span><br><span class="line"></span><br><span class="line">    miscdrv_class = class_create(THIS_MODULE, <span class="string">"miscdrv_class"</span>);</span><br><span class="line">        ret = PTR_ERR(miscdrv_class);</span><br><span class="line">        <span class="keyword">if</span> (IS_ERR(miscdrv_class)) &#123;</span><br><span class="line">        unregister_chrdev(major, DRVNAME);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;   </span><br><span class="line"></span><br><span class="line">    device_create(miscdrv_class, <span class="literal">NULL</span>, MKDEV(major, <span class="number">0</span>), <span class="literal">NULL</span>, <span class="string">"miscdev%d"</span>, <span class="number">0</span>); </span><br><span class="line">    device_create(miscdrv_class, <span class="literal">NULL</span>, MKDEV(major, <span class="number">10</span>), <span class="literal">NULL</span>, <span class="string">"miscdev%d"</span>, <span class="number">2</span>); </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> __exit <span class="title">miscdrv_exit</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    device_destroy(miscdrv_class, MKDEV(major, <span class="number">0</span>));</span><br><span class="line">    device_destroy(miscdrv_class, MKDEV(major, <span class="number">10</span>));</span><br><span class="line"></span><br><span class="line">    class_destroy(miscdrv_class);</span><br><span class="line">    unregister_chrdev(major, DRVNAME);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通常我们会先创建一个类（<code>class</code>），在类下创建多个设备（这里估计任意写的次设备号）。<br>这样，驱动加载后会自动生成 <code>/dev/miscdev0</code> 和 <code>/dev/miscdev2</code>。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@imx6ull:/mnt]# ls /dev/misc* -l</span><br><span class="line">crw-------    1 root     root      245,   0 Jan  1 00:43 /dev/miscdev0</span><br><span class="line">crw-------    1 root     root      245,  10 Jan  1 00:43 /dev/miscdev2</span><br></pre></td></tr></table></figure>
<p>同时，<code>sysfs</code> 虚拟文件系统会创建2个目录：</p>
<ul>
<li><code>/sys/class/miscdev_class</code>:<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@imx6ull:/mnt]# ls /sys/class/miscdrv_class/ -l</span><br><span class="line">total 0</span><br><span class="line">lrwxrwxrwx    1 root     root             0 Jan  1 00:44 miscdev0 -&gt; ../../devices/virtual/miscdrv_class/miscdev0</span><br><span class="line">lrwxrwxrwx    1 root     root             0 Jan  1 00:44 miscdev2 -&gt; ../../devices/virtual/miscdrv_class/miscdev2</span><br></pre></td></tr></table></figure></li>
<li><code>/sys/devices/virtual/miscdrv_class/</code> (注意是miscdrv_class而不是字符设备明miscdev):<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@imx6ull:/mnt]# ls /sys/devices/virtual/miscdrv_class/ -l</span><br><span class="line">total 0</span><br><span class="line">drwxr-xr-x    3 root     root             0 Jan  1 00:43 miscdev0</span><br><span class="line">drwxr-xr-x    3 root     root             0 Jan  1 00:43 miscdev2</span><br></pre></td></tr></table></figure>
<br>

</li>
</ul>
<h2 id="只使用class-create"><a href="#只使用class-create" class="headerlink" title="只使用class_create"></a>只使用class_create</h2><p>显然两个字符设备节点是通过 <code>device_create</code> 创建出来的。</p>
<blockquote>
<p>如果代码中不创建设备（不调用device_create）会怎么样呢？</p>
</blockquote>
<blockquote>
<p>通过mknod创建的设备能直接使用吗？</p>
</blockquote>
<h3 id="不调用device-create"><a href="#不调用device-create" class="headerlink" title="不调用device_create"></a>不调用device_create</h3><p>和预期一样。但有一点意外：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@imx6ull:/mnt]# ls /sys/class/miscdrv_class/ -l</span><br><span class="line">total 0</span><br><span class="line">[root@imx6ull:/mnt]# ls /sys/devices/virtual/miscdev_class -l               //如果类下没有设备，sysfs甚至不创建类目录</span><br><span class="line">ls: /sys/devices/virtual/miscdev_class: No such file or directory</span><br></pre></td></tr></table></figure>

<h3 id="使用mknod手动添加设备"><a href="#使用mknod手动添加设备" class="headerlink" title="使用mknod手动添加设备"></a>使用mknod手动添加设备</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@imx6ull:/mnt]# mknod /dev/miscdev0 c 245 0</span><br><span class="line">[root@imx6ull:/mnt]# ls /dev/misc* -l</span><br><span class="line">crw-r--r--    1 root     root      245,   0 Jan  1 00:59 /dev/miscdev0</span><br></pre></td></tr></table></figure>
<blockquote>
<p>可以直接访问吗？当然是可以的：</p>
</blockquote>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@imx6ull:/mnt]# cat /dev/miscdev0 </span><br><span class="line">[ 1624.245360] [miscdrv_open] entry</span><br><span class="line">[ 1624.248948] [miscdrv_read] entry</span><br><span class="line">[ 1624.252240] [miscdrv_close] entry</span><br></pre></td></tr></table></figure>
<p>内核会根据主设备号找到驱动，调用驱动对应接口。<br>至于你操作的是哪个具体设备，驱动需要根据次设备号判断。</p>
<blockquote>
<p>这下有设备了，sysfs会创建 <code>/sys/devices/virtual/miscdev_class</code> 目录吗？</p>
</blockquote>
<p>仍然不会:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@imx6ull:/mnt]# ls /sys/devices/virtual/miscdrv_class/ -l</span><br><span class="line">ls: /sys/devices/virtual/miscdrv_class/: No such file or directory</span><br></pre></td></tr></table></figure>
<p>而且对应的class目录下也没有增加新设备：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@imx6ull:/mnt]# ls /sys/class/miscdrv_class/ -l</span><br><span class="line">total 0</span><br></pre></td></tr></table></figure>
<p><strong>总结</strong>：<br>也就是说只有通过device_create接口创建的设备，sysfs才会将该设备纳入管理。<br><br></p>
<h2 id="device未销毁（未device-destroy）的后果"><a href="#device未销毁（未device-destroy）的后果" class="headerlink" title="device未销毁（未device_destroy）的后果"></a>device未销毁（未device_destroy）的后果</h2><p>通过 <code>mknod</code> 创建的设备节点，我们直接 <code>rm</code> 删除就可以了。</p>
<blockquote>
<p>如果是通过 <code>device_create</code> 创建的设备不销毁会有什么后果？</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">device_create(miscdrv_class, <span class="literal">NULL</span>, MKDEV(major, <span class="number">5</span>), <span class="literal">NULL</span>, <span class="string">"miscdev%d"</span>, <span class="number">5</span>);</span><br><span class="line"><span class="comment">//device_destroy(miscdrv_class, MKDEV(major, 5));   //故意不销毁</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@imx6ull:/mnt]# insmod miscdrv.ko </span><br><span class="line">[ 2761.639832] [miscdrv_entry] major: 245</span><br><span class="line">[root@imx6ull:/mnt]# </span><br><span class="line">[root@imx6ull:/mnt]# rmmod miscdrv </span><br><span class="line">[root@imx6ull:/mnt]# </span><br><span class="line">[root@imx6ull:/mnt]# insmod miscdrv.ko </span><br><span class="line">[ 2774.192532] [miscdrv_entry] major: 245</span><br><span class="line">[ 2774.206907] ------------[ cut here ]------------</span><br><span class="line">[ 2774.211642] WARNING: CPU: 0 PID: 539 at fs/sysfs/dir.c:31 sysfs_warn_dup+0x64/0x74</span><br><span class="line">[ 2774.221564] sysfs: cannot create duplicate filename '/devices/virtual/miscdrv_class'     //内核WARN告警：无法创建重复目录</span><br><span class="line">[ 2774.232010] ---[ end trace 1f6c23c15d2b3615 ]---</span><br><span class="line">[ 2774.243888] ------------[ cut here ]------------</span><br><span class="line">[ 2774.250508] WARNING: CPU: 0 PID: 539 at lib/kobject.c:240 kobject_add_internal+0x2cc/0x340</span><br><span class="line">[ 2774.259632] ---[ end trace 1f6c23c15d2b3616 ]---</span><br><span class="line">[ 2774.267846] ------------[ cut here ]------------</span><br><span class="line">[ 2774.272500] WARNING: CPU: 0 PID: 539 at fs/sysfs/dir.c:31 sysfs_warn_dup+0x64/0x74</span><br><span class="line">[ 2774.281248] sysfs: cannot create duplicate filename '/dev/char/245:5'</span><br><span class="line">[ 2774.288517] ---[ end trace 1f6c23c15d2b3617 ]---</span><br></pre></td></tr></table></figure>
<p>而且这个错误是无法恢复的。<br>我们尝试删除告警的目录：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@imx6ull:/mnt]# rmmod miscdrv </span><br><span class="line">[root@imx6ull:/mnt]# </span><br><span class="line">[root@imx6ull:/mnt]# rm -rf /sys/devices/virtual/miscdrv_class/</span><br><span class="line">rm: can't remove '/sys/devices/virtual/miscdrv_class/miscdev5/subsystem': Operation not permitted</span><br><span class="line">rm: can't remove '/sys/devices/virtual/miscdrv_class/miscdev5/power/runtime_suspended_time': Operation not permitted</span><br><span class="line">rm: can't remove '/sys/devices/virtual/miscdrv_class/miscdev5/power/autosuspend_delay_ms': Operation not permitted</span><br><span class="line">rm: can't remove '/sys/devices/virtual/miscdrv_class/miscdev5/power/runtime_active_time': Operation not permitted</span><br><span class="line">rm: can't remove '/sys/devices/virtual/miscdrv_class/miscdev5/power/control': Operation not permitted</span><br><span class="line">rm: can't remove '/sys/devices/virtual/miscdrv_class/miscdev5/power/runtime_status': Operation not permitted</span><br><span class="line">rm: can't remove '/sys/devices/virtual/miscdrv_class/miscdev5/power': Operation not permitted</span><br><span class="line">rm: can't remove '/sys/devices/virtual/miscdrv_class/miscdev5/dev': Operation not permitted</span><br><span class="line">rm: can't remove '/sys/devices/virtual/miscdrv_class/miscdev5/uevent': Operation not permitted</span><br><span class="line">rm: can't remove '/sys/devices/virtual/miscdrv_class/miscdev5': Operation not permitted</span><br><span class="line">rm: can't remove '/sys/devices/virtual/miscdrv_class': Operation not permitted</span><br></pre></td></tr></table></figure>
<br>

<h2 id="miscdevice"><a href="#miscdevice" class="headerlink" title="miscdevice"></a>miscdevice</h2><p>前面写的虽然我叫了个miscdev，其实是个字符设备。<br>我们经常用的miscdevice有自己的注册注销接口，<code>misc_register</code> 和 <code>misc_deregister</code> 。<br>而miscdevice却不需要手动创建class（class_create）、也不需要创建device（device_create）。<br>这点需要注意。<br>它的设备节点只有1个，也就没有办法区分那个设备，一般通过ioctl传递需要操作的设备编号。<br><br></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>linux目录结构</title>
    <url>/2020/04/12/linux%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<p>介绍linux的目录结构。</p>
<a id="more"></a>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">linux目录结构</span><br><span class="line">|-bin           基本命令，所有用户可使用（与开机有关，就是系统启动要用的）</span><br><span class="line">|-boot          启动文件，比如内核等</span><br><span class="line">|-dev           设备文件</span><br><span class="line">|-etc           配置文件</span><br><span class="line">|-home          家目录</span><br><span class="line">|-lib           库（&#x2F;bin &#x2F;sbin下的app用的库，&#x2F;usr&#x2F;bin &#x2F;usr&#x2F;sbin下的也可以放这里，没有限制）</span><br><span class="line">|-media         插上u盘等外设时会挂在到该目录</span><br><span class="line">|-mnt           用来挂在其他文件系统</span><br><span class="line">|-opt           可选程序</span><br><span class="line">|-proc          挂载虚拟的proc文件系统，可以查看各进程信息（proc，其实就是process，但现在</span><br><span class="line">                proc内容很多了</span><br><span class="line">|-root          root用户的家目录</span><br><span class="line">|-sbin          基本的系统命令，系统管理员才能使用（与开机有关，就是系统启动要用的）</span><br><span class="line">|-sys           用来挂载虚拟的sys文件系统，可查看系统信息</span><br><span class="line">|-tmp           临时目录，存放临时文件</span><br><span class="line">|-usr           unix software resource，存放可分享的与不可变动的数据（usr和var是一对，</span><br><span class="line">                usr的不可变动指开机后还在的。相对的，var是变动的，开机后就没了）</span><br><span class="line">|   |-bin       绝大部分用户可使用的指令（与开机无关）</span><br><span class="line">|   |-include   头文件</span><br><span class="line">|   |-lib       库</span><br><span class="line">|   |-local     系统管理员在本机自行安装、下载的软件</span><br><span class="line">|   |-sbin      非系统正常运行所需要的系统命令</span><br><span class="line">|   |-share     放置共享文件的地方，比如&#x2F;usr&#x2F;share&#x2F;man里存放帮助文件</span><br><span class="line">|   |-src       源码</span><br><span class="line">|-var           主要针对常态性变动的文件，包括缓存（cache）、log文件等</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>man</title>
    <url>/2020/04/12/man/</url>
    <content><![CDATA[<p>记录man的基础知识，常用的指令、系统调用等等的说明。</p>
<a id="more"></a>

<p><code>man man</code></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1   Executable programs or shell commands</span><br><span class="line">2   System calls (functions provided by the kernel)</span><br><span class="line">3   Library calls (functions within program libraries)</span><br><span class="line">4   Special files (usually found in &#x2F;dev)</span><br><span class="line">5   File formats and conventions eg &#x2F;etc&#x2F;passwd</span><br><span class="line">6   Games</span><br><span class="line">7   Miscellaneous (including macro packages and conventions), e.g. man(7), groff(7)</span><br><span class="line">8   System administration commands (usually only for root)</span><br><span class="line">9   Kernel routines [Non standard]</span><br></pre></td></tr></table></figure>
<p>man这本书有9本（默认从第1本开始找，依次往后）：</p>
<ul>
<li>第一本讲系统指令<br>比如 <code>man ascii</code> 、<code>man sed</code> 等<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SED(1)                                            User Commands                                            SED(1)</span><br><span class="line"></span><br><span class="line">NAME</span><br><span class="line">       sed - stream editor for filtering and transforming text</span><br></pre></td></tr></table></figure>
左上角的 <code>SED(1)</code> 这个1就是第几本。</li>
<li>第二本讲系统调用<br>比如 <code>man 2 open</code> 、 <code>man select</code> 等<br>如果 <code>open</code> 不指定 <code>2</code> ，那么 <code>man</code> 默认查询的是 <code>openvt</code>。<br>而 <code>select</code> 在第一本书中没有类似的。</li>
<li>[FIX ME]<br>
</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>lsof.md</title>
    <url>/2020/04/26/lsof/</url>
    <content><![CDATA[<p>lsof</p>
<a id="more"></a>

<h2 id="lsof"><a href="#lsof" class="headerlink" title="lsof"></a>lsof</h2><p>查看所有打开的文件。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@imx6ull:/proc]# lsof --help</span><br><span class="line">BusyBox v1.29.3 (2020-02-20 23:06:49 EST) multi-call binary.</span><br><span class="line"></span><br><span class="line">Usage: lsof </span><br><span class="line"></span><br><span class="line">Show all open files</span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@imx6ull:/proc]# lsof</span><br><span class="line">1   /sbin/init  /run/initctl</span><br><span class="line">170 /sbin/syslogd   socket:[2427]</span><br><span class="line">170 /sbin/syslogd   /tmp/auth.log</span><br><span class="line">170 /sbin/syslogd   /tmp/messages</span><br><span class="line">170 /sbin/syslogd   /tmp/user.log</span><br><span class="line">173 /sbin/klogd /proc/kmsg</span><br><span class="line">173 /sbin/klogd socket:[2433]</span><br><span class="line">180 /usr/bin/dbus-daemon    /dev/null</span><br><span class="line">180 /usr/bin/dbus-daemon    /dev/null</span><br><span class="line">180 /usr/bin/dbus-daemon    /dev/null</span><br><span class="line">180 /usr/bin/dbus-daemon    anon_inode:[eventpoll]</span><br><span class="line">180 /usr/bin/dbus-daemon    anon_inode:inotify</span><br><span class="line">180 /usr/bin/dbus-daemon    socket:[2445]</span><br><span class="line">180 /usr/bin/dbus-daemon    socket:[2446]</span><br><span class="line">180 /usr/bin/dbus-daemon    socket:[2447]</span><br><span class="line">180 /usr/bin/dbus-daemon    socket:[2462]</span><br><span class="line">181 /home/myir/mxbackend    /dev/null</span><br><span class="line">181 /home/myir/mxbackend    /dev/console</span><br><span class="line">181 /home/myir/mxbackend    /dev/console</span><br><span class="line">181 /home/myir/mxbackend    socket:[2461]</span><br><span class="line">182 /home/myir/mxapp    /dev/console</span><br><span class="line">182 /home/myir/mxapp    /dev/console</span><br><span class="line">182 /home/myir/mxapp    /dev/console</span><br><span class="line">182 /home/myir/mxapp    /dev/urandom</span><br><span class="line">182 /home/myir/mxapp    anon_inode:[eventfd]</span><br><span class="line">182 /home/myir/mxapp    /dev/fb0</span><br><span class="line">182 /home/myir/mxapp    /dev/tty0</span><br><span class="line">182 /home/myir/mxapp    socket:[2508]</span><br><span class="line">182 /home/myir/mxapp    socket:[2509]</span><br><span class="line">182 /home/myir/mxapp    /dev/input/event1</span><br><span class="line">182 /home/myir/mxapp    socket:[2511]</span><br><span class="line">182 /home/myir/mxapp    socket:[2512]</span><br><span class="line">182 /home/myir/mxapp    /dev/input/event1</span><br><span class="line">182 /home/myir/mxapp    /tmp/qtsingleapp-mxapp-9986-0-lockfile</span><br><span class="line">182 /home/myir/mxapp    socket:[2514]</span><br><span class="line">182 /home/myir/mxapp    /dev/input/event1</span><br><span class="line">182 /home/myir/mxapp    /dev/input/event0</span><br><span class="line">189 /sbin/udevd /dev/null</span><br><span class="line">189 /sbin/udevd /dev/null</span><br><span class="line">189 /sbin/udevd /dev/null</span><br><span class="line">189 /sbin/udevd socket:[2458]</span><br><span class="line">189 /sbin/udevd socket:[2459]</span><br><span class="line">189 /sbin/udevd /dev/kmsg</span><br><span class="line">189 /sbin/udevd anon_inode:inotify</span><br><span class="line">189 /sbin/udevd anon_inode:[signalfd]</span><br><span class="line">189 /sbin/udevd socket:[2470]</span><br><span class="line">189 /sbin/udevd socket:[2471]</span><br><span class="line">189 /sbin/udevd anon_inode:[eventpoll]</span><br><span class="line">221 /usr/bin/dbus-daemon    /dev/null</span><br><span class="line">221 /usr/bin/dbus-daemon    /dev/null</span><br><span class="line">221 /usr/bin/dbus-daemon    /dev/null</span><br><span class="line">221 /usr/bin/dbus-daemon    anon_inode:[eventpoll]</span><br><span class="line">221 /usr/bin/dbus-daemon    socket:[2967]</span><br><span class="line">221 /usr/bin/dbus-daemon    anon_inode:inotify</span><br><span class="line">221 /usr/bin/dbus-daemon    socket:[2971]</span><br><span class="line">221 /usr/bin/dbus-daemon    socket:[2972]</span><br><span class="line">221 /usr/bin/dbus-daemon    socket:[3084]</span><br><span class="line">221 /usr/bin/dbus-daemon    socket:[3088]</span><br><span class="line">221 /usr/bin/dbus-daemon    socket:[3123]</span><br><span class="line">221 /usr/bin/dbus-daemon    socket:[3477]</span><br><span class="line">252 /usr/sbin/connmand  /dev/null</span><br><span class="line">252 /usr/sbin/connmand  /dev/null</span><br><span class="line">252 /usr/sbin/connmand  /dev/null</span><br><span class="line">252 /usr/sbin/connmand  anon_inode:[eventfd]</span><br><span class="line">252 /usr/sbin/connmand  anon_inode:[signalfd]</span><br><span class="line">252 /usr/sbin/connmand  socket:[3087]</span><br><span class="line">252 /usr/sbin/connmand  socket:[3091]</span><br><span class="line">252 /usr/sbin/connmand  /dev/urandom</span><br><span class="line">252 /usr/sbin/connmand  anon_inode:inotify</span><br><span class="line">252 /usr/sbin/connmand  anon_inode:inotify</span><br><span class="line">252 /usr/sbin/connmand  socket:[3097]</span><br><span class="line">252 /usr/sbin/connmand  socket:[3119]</span><br><span class="line">252 /usr/sbin/connmand  socket:[3124]</span><br><span class="line">252 /usr/sbin/connmand  socket:[3131]</span><br><span class="line">252 /usr/sbin/connmand  socket:[3135]</span><br><span class="line">252 /usr/sbin/connmand  /var/lib/connman/ethernet_00013f2d3e4d_cable/data</span><br><span class="line">252 /usr/sbin/connmand  socket:[3165]</span><br><span class="line">252 /usr/sbin/connmand  /dev/urandom</span><br><span class="line">252 /usr/sbin/connmand  socket:[3711]</span><br><span class="line">256 /usr/sbin/ofonod    /dev/null</span><br><span class="line">256 /usr/sbin/ofonod    /dev/null</span><br><span class="line">256 /usr/sbin/ofonod    /dev/null</span><br><span class="line">256 /usr/sbin/ofonod    anon_inode:[eventfd]</span><br><span class="line">256 /usr/sbin/ofonod    anon_inode:[eventpoll]</span><br><span class="line">256 /usr/sbin/ofonod    anon_inode:[signalfd]</span><br><span class="line">256 /usr/sbin/ofonod    socket:[3082]</span><br><span class="line">256 /usr/sbin/ofonod    socket:[3083]</span><br><span class="line">256 /usr/sbin/ofonod    socket:[3092]</span><br><span class="line">256 /usr/sbin/ofonod    socket:[3095]</span><br><span class="line">256 /usr/sbin/ofonod    socket:[3099]</span><br><span class="line">262 /usr/sbin/wpa_supplicant    /dev/null</span><br><span class="line">262 /usr/sbin/wpa_supplicant    /dev/null</span><br><span class="line">262 /usr/sbin/wpa_supplicant    /dev/null</span><br><span class="line">262 /usr/sbin/wpa_supplicant    socket:[3476]</span><br><span class="line">262 /usr/sbin/wpa_supplicant    socket:[3487]</span><br><span class="line">262 /usr/sbin/wpa_supplicant    socket:[3488]</span><br><span class="line">262 /usr/sbin/wpa_supplicant    socket:[3489]</span><br><span class="line">262 /usr/sbin/wpa_supplicant    socket:[3490]</span><br><span class="line">265 /usr/sbin/ntpd  /dev/null</span><br><span class="line">265 /usr/sbin/ntpd  /dev/null</span><br><span class="line">265 /usr/sbin/ntpd  /dev/null</span><br><span class="line">265 /usr/sbin/ntpd  socket:[3481]</span><br><span class="line">265 /usr/sbin/ntpd  socket:[5927]</span><br><span class="line">265 /usr/sbin/ntpd  socket:[5928]</span><br><span class="line">265 /usr/sbin/ntpd  socket:[3494]</span><br><span class="line">265 /usr/sbin/ntpd  socket:[3497]</span><br><span class="line">265 /usr/sbin/ntpd  socket:[3502]</span><br><span class="line">265 /usr/sbin/ntpd  socket:[3504]</span><br><span class="line">265 /usr/sbin/ntpd  socket:[3506]</span><br><span class="line">265 /usr/sbin/ntpd  socket:[3507]</span><br><span class="line">265 /usr/sbin/ntpd  socket:[3508]</span><br><span class="line">265 /usr/sbin/ntpd  socket:[3509]</span><br><span class="line">265 /usr/sbin/ntpd  socket:[3826]</span><br><span class="line">276 /usr/sbin/sshd  /dev/null</span><br><span class="line">276 /usr/sbin/sshd  /dev/null</span><br><span class="line">276 /usr/sbin/sshd  /dev/null</span><br><span class="line">276 /usr/sbin/sshd  socket:[3538]</span><br><span class="line">276 /usr/sbin/sshd  socket:[3541]</span><br><span class="line">288 /usr/sbin/smbd  /dev/null</span><br><span class="line">288 /usr/sbin/smbd  /dev/null</span><br><span class="line">288 /usr/sbin/smbd  /tmp/samba/log.smbd</span><br><span class="line">288 /usr/sbin/smbd  anon_inode:[eventpoll]</span><br><span class="line">288 /usr/sbin/smbd  /dev/urandom</span><br><span class="line">288 /usr/sbin/smbd  /var/lib/samba/private/secrets.tdb</span><br><span class="line">288 /usr/sbin/smbd  /tmp/samba/msg.lock/288</span><br><span class="line">288 /usr/sbin/smbd  socket:[3584]</span><br><span class="line">288 /usr/sbin/smbd  /tmp/samba/names.tdb</span><br><span class="line">288 /usr/sbin/smbd  /tmp/samba/log.smbd</span><br><span class="line">288 /usr/sbin/smbd  /dev/null</span><br><span class="line">288 /usr/sbin/smbd  /dev/null</span><br><span class="line">288 /usr/sbin/smbd  /run/samba/smbd.pid</span><br><span class="line">288 /usr/sbin/smbd  pipe:[3585]</span><br><span class="line">288 /usr/sbin/smbd  pipe:[3585]</span><br><span class="line">288 /usr/sbin/smbd  anon_inode:[eventfd]</span><br><span class="line">288 /usr/sbin/smbd  /tmp/samba/smbXsrv_version_global.tdb</span><br><span class="line">288 /usr/sbin/smbd  /tmp/samba/smbXsrv_client_global.tdb</span><br><span class="line">288 /usr/sbin/smbd  /tmp/samba/smbXsrv_session_global.tdb</span><br><span class="line">288 /usr/sbin/smbd  /tmp/samba/smbXsrv_tcon_global.tdb</span><br><span class="line">288 /usr/sbin/smbd  /tmp/samba/brlock.tdb</span><br><span class="line">288 /usr/sbin/smbd  /tmp/samba/locking.tdb</span><br><span class="line">288 /usr/sbin/smbd  /tmp/samba/leases.tdb</span><br><span class="line">288 /usr/sbin/smbd  /var/lib/samba/share_info.tdb</span><br><span class="line">288 /usr/sbin/smbd  /tmp/samba/gencache.tdb</span><br><span class="line">288 /usr/sbin/smbd  /tmp/samba/gencache_notrans.tdb</span><br><span class="line">288 /usr/sbin/smbd  /var/lib/samba/group_mapping.tdb</span><br><span class="line">288 /usr/sbin/smbd  /var/lib/samba/account_policy.tdb</span><br><span class="line">288 /usr/sbin/smbd  /var/lib/samba/private/passdb.tdb</span><br><span class="line">288 /usr/sbin/smbd  /tmp/samba/smbXsrv_open_global.tdb</span><br><span class="line">288 /usr/sbin/smbd  /tmp/samba/printer_list.tdb</span><br><span class="line">288 /usr/sbin/smbd  pipe:[3614]</span><br><span class="line">288 /usr/sbin/smbd  pipe:[3614]</span><br><span class="line">288 /usr/sbin/smbd  socket:[3615]</span><br><span class="line">288 /usr/sbin/smbd  socket:[3616]</span><br><span class="line">288 /usr/sbin/smbd  socket:[3617]</span><br><span class="line">288 /usr/sbin/smbd  socket:[3618]</span><br><span class="line">291 /usr/sbin/smbd  /dev/null</span><br><span class="line">291 /usr/sbin/smbd  /dev/null</span><br><span class="line">291 /usr/sbin/smbd  /tmp/samba/log.smbd</span><br><span class="line">291 /usr/sbin/smbd  anon_inode:[eventpoll]</span><br><span class="line">291 /usr/sbin/smbd  /dev/urandom</span><br><span class="line">291 /usr/sbin/smbd  /var/lib/samba/private/secrets.tdb</span><br><span class="line">291 /usr/sbin/smbd  /tmp/samba/msg.lock/291</span><br><span class="line">291 /usr/sbin/smbd  socket:[3598]</span><br><span class="line">291 /usr/sbin/smbd  /tmp/samba/names.tdb</span><br><span class="line">291 /usr/sbin/smbd  /tmp/samba/log.smbd</span><br><span class="line">291 /usr/sbin/smbd  /dev/null</span><br><span class="line">291 /usr/sbin/smbd  /dev/null</span><br><span class="line">291 /usr/sbin/smbd  /run/samba/smbd.pid</span><br><span class="line">291 /usr/sbin/smbd  pipe:[3585]</span><br><span class="line">291 /usr/sbin/smbd  /tmp/samba/smbXsrv_version_global.tdb</span><br><span class="line">291 /usr/sbin/smbd  /tmp/samba/smbXsrv_client_global.tdb</span><br><span class="line">291 /usr/sbin/smbd  /tmp/samba/smbXsrv_session_global.tdb</span><br><span class="line">291 /usr/sbin/smbd  /tmp/samba/smbXsrv_tcon_global.tdb</span><br><span class="line">291 /usr/sbin/smbd  /tmp/samba/brlock.tdb</span><br><span class="line">291 /usr/sbin/smbd  /tmp/samba/locking.tdb</span><br><span class="line">291 /usr/sbin/smbd  /tmp/samba/leases.tdb</span><br><span class="line">292 /usr/sbin/smbd  /dev/null</span><br><span class="line">292 /usr/sbin/smbd  /dev/null</span><br><span class="line">292 /usr/sbin/smbd  /tmp/samba/log.smbd</span><br><span class="line">292 /usr/sbin/smbd  anon_inode:[eventpoll]</span><br><span class="line">292 /usr/sbin/smbd  /dev/urandom</span><br><span class="line">292 /usr/sbin/smbd  /var/lib/samba/private/secrets.tdb</span><br><span class="line">292 /usr/sbin/smbd  /tmp/samba/msg.lock/292</span><br><span class="line">292 /usr/sbin/smbd  socket:[3600]</span><br><span class="line">292 /usr/sbin/smbd  /tmp/samba/names.tdb</span><br><span class="line">292 /usr/sbin/smbd  /tmp/samba/log.smbd</span><br><span class="line">292 /usr/sbin/smbd  /dev/null</span><br><span class="line">292 /usr/sbin/smbd  /dev/null</span><br><span class="line">292 /usr/sbin/smbd  /run/samba/smbd.pid</span><br><span class="line">292 /usr/sbin/smbd  pipe:[3585]</span><br><span class="line">292 /usr/sbin/smbd  /tmp/samba/smbXsrv_version_global.tdb</span><br><span class="line">292 /usr/sbin/smbd  /tmp/samba/smbXsrv_client_global.tdb</span><br><span class="line">292 /usr/sbin/smbd  /tmp/samba/smbXsrv_session_global.tdb</span><br><span class="line">292 /usr/sbin/smbd  /tmp/samba/smbXsrv_tcon_global.tdb</span><br><span class="line">292 /usr/sbin/smbd  /tmp/samba/brlock.tdb</span><br><span class="line">292 /usr/sbin/smbd  /tmp/samba/locking.tdb</span><br><span class="line">292 /usr/sbin/smbd  /tmp/samba/leases.tdb</span><br><span class="line">293 /usr/sbin/smbd  /dev/null</span><br><span class="line">293 /usr/sbin/smbd  /dev/null</span><br><span class="line">293 /usr/sbin/smbd  /tmp/samba/log.smbd</span><br><span class="line">293 /usr/sbin/smbd  anon_inode:[eventpoll]</span><br><span class="line">293 /usr/sbin/smbd  /dev/urandom</span><br><span class="line">293 /usr/sbin/smbd  /var/lib/samba/private/secrets.tdb</span><br><span class="line">293 /usr/sbin/smbd  /tmp/samba/msg.lock/293</span><br><span class="line">293 /usr/sbin/smbd  socket:[3621]</span><br><span class="line">293 /usr/sbin/smbd  /tmp/samba/names.tdb</span><br><span class="line">293 /usr/sbin/smbd  anon_inode:[eventfd]</span><br><span class="line">293 /usr/sbin/smbd  /dev/null</span><br><span class="line">293 /usr/sbin/smbd  /dev/null</span><br><span class="line">293 /usr/sbin/smbd  /run/samba/smbd.pid</span><br><span class="line">293 /usr/sbin/smbd  pipe:[3585]</span><br><span class="line">293 /usr/sbin/smbd  /tmp/samba/log.smbd</span><br><span class="line">293 /usr/sbin/smbd  /tmp/samba/smbXsrv_version_global.tdb</span><br><span class="line">293 /usr/sbin/smbd  /tmp/samba/smbXsrv_client_global.tdb</span><br><span class="line">293 /usr/sbin/smbd  /tmp/samba/smbXsrv_session_global.tdb</span><br><span class="line">293 /usr/sbin/smbd  /tmp/samba/smbXsrv_tcon_global.tdb</span><br><span class="line">293 /usr/sbin/smbd  /tmp/samba/brlock.tdb</span><br><span class="line">293 /usr/sbin/smbd  /tmp/samba/locking.tdb</span><br><span class="line">293 /usr/sbin/smbd  /tmp/samba/leases.tdb</span><br><span class="line">293 /usr/sbin/smbd  /var/lib/samba/share_info.tdb</span><br><span class="line">293 /usr/sbin/smbd  /tmp/samba/gencache.tdb</span><br><span class="line">293 /usr/sbin/smbd  /tmp/samba/gencache_notrans.tdb</span><br><span class="line">293 /usr/sbin/smbd  /var/lib/samba/group_mapping.tdb</span><br><span class="line">293 /usr/sbin/smbd  /var/lib/samba/account_policy.tdb</span><br><span class="line">293 /usr/sbin/smbd  /var/lib/samba/private/passdb.tdb</span><br><span class="line">293 /usr/sbin/smbd  /tmp/samba/smbXsrv_open_global.tdb</span><br><span class="line">293 /usr/sbin/smbd  /tmp/samba/printer_list.tdb</span><br><span class="line">293 /usr/sbin/smbd  pipe:[3614]</span><br><span class="line">294 /usr/sbin/nmbd  /dev/null</span><br><span class="line">294 /usr/sbin/nmbd  /dev/null</span><br><span class="line">294 /usr/sbin/nmbd  /tmp/samba/log.nmbd</span><br><span class="line">294 /usr/sbin/nmbd  /dev/null</span><br><span class="line">294 /usr/sbin/nmbd  anon_inode:[eventpoll]</span><br><span class="line">294 /usr/sbin/nmbd  /tmp/samba/msg.lock/294</span><br><span class="line">294 /usr/sbin/nmbd  /dev/urandom</span><br><span class="line">294 /usr/sbin/nmbd  socket:[3630]</span><br><span class="line">294 /usr/sbin/nmbd  /tmp/samba/names.tdb</span><br><span class="line">294 /usr/sbin/nmbd  /tmp/samba/log.nmbd</span><br><span class="line">294 /usr/sbin/nmbd  /dev/null</span><br><span class="line">294 /usr/sbin/nmbd  /run/samba/nmbd.pid</span><br><span class="line">294 /usr/sbin/nmbd  pipe:[3631]</span><br><span class="line">294 /usr/sbin/nmbd  pipe:[3631]</span><br><span class="line">294 /usr/sbin/nmbd  anon_inode:[eventfd]</span><br><span class="line">294 /usr/sbin/nmbd  socket:[3632]</span><br><span class="line">294 /usr/sbin/nmbd  socket:[3633]</span><br><span class="line">294 /usr/sbin/nmbd  socket:[3804]</span><br><span class="line">294 /usr/sbin/nmbd  socket:[3846]</span><br><span class="line">294 /usr/sbin/nmbd  socket:[3847]</span><br><span class="line">294 /usr/sbin/nmbd  socket:[3848]</span><br><span class="line">294 /usr/sbin/nmbd  socket:[3849]</span><br><span class="line">297 /bin/bash   /dev/ttymxc0</span><br><span class="line">297 /bin/bash   /dev/ttymxc0</span><br><span class="line">297 /bin/bash   /dev/ttymxc0</span><br><span class="line">297 /bin/bash   /dev/ttymxc0</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>系统工具</category>
      </categories>
  </entry>
  <entry>
    <title>printf的宽度、精度变量控制</title>
    <url>/2020/10/04/printf%E7%9A%84%E5%AE%BD%E5%BA%A6%E3%80%81%E7%B2%BE%E5%BA%A6%E5%8F%98%E9%87%8F%E6%8E%A7%E5%88%B6/</url>
    <content><![CDATA[<p>算法竞赛中有一题要求保留小数点后<code>x</code>位，<code>x</code>由用户输入。<br>这里需要用到printf的精度变量控制。</p>
<a id="more"></a>

<p>printf format中可以用<code>*</code>来表示变量。</p>
<blockquote>
<p>示例</p>
</blockquote>
<h3 id="小数点精度"><a href="#小数点精度" class="headerlink" title="小数点精度"></a>小数点精度</h3><p><code>input</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">6</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure>
<p><code>code</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="number">3</span> == <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;c) &amp;&amp; a) &#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.*lf"</span>,c,(<span class="keyword">double</span>)a/b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><code>terminal</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">0.1667</span><br></pre></td></tr></table></figure>
<br>

<h3 id="字符串的宽度-精度"><a href="#字符串的宽度-精度" class="headerlink" title="字符串的宽度+精度"></a>字符串的宽度+精度</h3><p><code>code</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="built_in">string</span> s=<span class="string">"abc123"</span>;</span><br><span class="line"><span class="keyword">int</span> a=<span class="number">10</span>,b=<span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%*.*s\n"</span>, a,b, s.c_str());</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%-*.*s\n"</span>, a,b, s.c_str());</span><br></pre></td></tr></table></figure>
<p><code>terminal</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">       abc</span><br><span class="line">abc</span><br></pre></td></tr></table></figure>
<br>




]]></content>
      <categories>
        <category>acm</category>
      </categories>
  </entry>
  <entry>
    <title>hexo中使用MathJax</title>
    <url>/2020/10/08/hexo%E4%B8%AD%E4%BD%BF%E7%94%A8MathJax/</url>
    <content><![CDATA[<p>一些交易指标的公式编写，需要用到MathJax引擎。<br>记录hexo中如何使用它。</p>
<a id="more"></a>
<br>

<p>直接插入js脚本是不行的。<br>比如：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span> src=<span class="string">"http://cdn.mathjax.org/mathjax/latest/MathJax.js?config=default"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>本地 <code>hexo s</code> 运行良好，但 <code>hexo d</code> 部署上去，是无法显示公式的。</p>
<p>其实hexo的主题，比如我在用的next是自带mathjax支持的，只需要使能它。</p>
<p>使能MathJax：<br><code>./themes/next/_config.yml</code></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="number">505</span>   mathjax:</span><br><span class="line"><span class="number">506</span>     enable: <span class="literal">true</span></span><br></pre></td></tr></table></figure>

<p>在post头添加一行：<br><code>mathjax: true</code><br>即：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: hexo中使用MathJax</span><br><span class="line">categories: hexo</span><br><span class="line">date: <span class="number">2020</span><span class="number">-10</span><span class="number">-08</span> <span class="number">09</span>:<span class="number">01</span>:<span class="number">52</span></span><br><span class="line">mathjax: <span class="literal">true</span></span><br><span class="line">tags:</span><br><span class="line">---</span><br></pre></td></tr></table></figure>


<p>公式目前测试只能用<code>$$ $$</code>包裹。不支持<code>$ $</code>包裹。前者是块，后者是行。<br>而且还需要在外面套一个<code>&lt;p&gt;</code>标签。原因不明。试出来的。</p>
<blockquote>
<p>举例</p>
</blockquote>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">&lt;p align=<span class="string">"left"</span>&gt;</span><br><span class="line">$$\<span class="built_in">begin</span>&#123;aligned&#125;</span><br><span class="line">\sum_&#123;i=<span class="number">0</span>&#125;^N\int_&#123;a&#125;^&#123;b&#125;g(t,i)\<span class="built_in">text</span>&#123;d&#125;t</span><br><span class="line">\<span class="built_in">end</span>&#123;aligned&#125;$$</span><br><span class="line">&lt;/p&gt;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>效果</p>
</blockquote>
<p align="left">
$$\begin{aligned}
\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t
\end{aligned}$$
</p>

<p>其中 <code>\begin{aligned}</code> 是为了多行公式可以对齐。<br>默认是右对齐。</p>
<p>比如：</p>
<p align="left">
$$\begin{aligned}
a=x_1+x_2+x_3\\
b=x_4+x_5\\
c=x_6
\end{aligned}$$
</p>

<p>对齐后：</p>
<p align="left">
$$\begin{aligned}
a&=x_1+x_2+x_3\\
b&=x_4+x_5\\
c&=x_6
\end{aligned}$$
</p>




]]></content>
      <categories>
        <category>hexo</category>
      </categories>
  </entry>
  <entry>
    <title>shell</title>
    <url>/2020/04/12/shell/</url>
    <content><![CDATA[<p>记录shell的基本语法、常用的使用技巧等。</p>
<a id="more"></a>

<p><strong>不一定非得写shell脚本再执行，可以直接执行</strong><br><code>for((i=0;i&lt;10;i++));do echo $i;done</code><br><br><br><strong>xargs cp结合使用</strong><br><code>find . -name &quot;*&quot; | xargs -i cp {}  /home/users/</code><br><br><br><strong>删除除了某个/某些文件外的其他文件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&gt;a1.c</span><br><span class="line">&gt;a2.c</span><br><span class="line">&gt;a3.c</span><br><span class="line"></span><br><span class="line">rm -rf !(a1*|a3*)</span><br></pre></td></tr></table></figure>
<p>结果就是，保留了 <code>a1.c</code>、 <code>a3.c</code>，删除了 <code>a2.c</code> 。<br><br></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>platform总线</title>
    <url>/2020/05/17/platform%E6%80%BB%E7%BA%BF/</url>
    <content><![CDATA[<p>platform虚拟总线的使用注意事项。</p>
<a id="more"></a>


<h2 id="platform-device的资源"><a href="#platform-device的资源" class="headerlink" title="platform_device的资源"></a>platform_device的资源</h2><p>描述device资源的方式有两种：</p>
<ul>
<li>1）<code>resource</code> :<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//arch/arm/mach-cns3xxx/devices.c</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">resource</span> <span class="title">cns3xxx_sdhci_resources</span>[] = &#123;</span></span><br><span class="line">    [<span class="number">0</span>] = &#123;</span><br><span class="line">        .start = CNS3XXX_SDIO_BASE,</span><br><span class="line">        .<span class="built_in">end</span>   = CNS3XXX_SDIO_BASE + SZ_4K - <span class="number">1</span>,</span><br><span class="line">        .flags = IORESOURCE_MEM,</span><br><span class="line">    &#125;,</span><br><span class="line">    [<span class="number">1</span>] = &#123; </span><br><span class="line">        .start = IRQ_CNS3XXX_SDIO,</span><br><span class="line">        .<span class="built_in">end</span>   = IRQ_CNS3XXX_SDIO,</span><br><span class="line">        .flags = IORESOURCE_IRQ,</span><br><span class="line">    &#125;, </span><br><span class="line">&#125;;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">platform_device</span> <span class="title">cns3xxx_sdhci_pdev</span> = &#123;</span></span><br><span class="line">    .name       = <span class="string">"sdhci-cns3xxx"</span>,</span><br><span class="line">    .id     = <span class="number">0</span>,</span><br><span class="line">    .num_resources  = ARRAY_SIZE(cns3xxx_sdhci_resources),</span><br><span class="line">    .resource   = cns3xxx_sdhci_resources,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li>2）dev的 <code>platform_data</code> ：<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">//arch/arm/mach-davinci/board-da850-evm.c</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_led</span> <span class="title">da850_evm_bb_leds</span>[] = &#123;</span></span><br><span class="line">    [<span class="number">0</span> ... DA850_N_BB_USER_LED - <span class="number">1</span>] = &#123;</span><br><span class="line">        .active_low = <span class="number">1</span>,</span><br><span class="line">        .gpio = <span class="number">-1</span>, <span class="comment">/* assigned at runtime */</span></span><br><span class="line">        .name = <span class="literal">NULL</span>, <span class="comment">/* assigned at runtime */</span></span><br><span class="line">    &#125;, </span><br><span class="line">&#125;;      </span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">gpio_led_platform_data</span> <span class="title">da850_evm_bb_leds_pdata</span> = &#123;</span></span><br><span class="line">    .leds = da850_evm_bb_leds,</span><br><span class="line">    .num_leds = ARRAY_SIZE(da850_evm_bb_leds),</span><br><span class="line">&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">platform_device</span> <span class="title">da850_evm_bb_leds_device</span> = &#123;</span></span><br><span class="line">    .name       = <span class="string">"leds-gpio"</span>,</span><br><span class="line">    .id     = <span class="number">-1</span>, </span><br><span class="line">    .dev = &#123;</span><br><span class="line">        .platform_data = &amp;da850_evm_bb_leds_pdata</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
第二种更加自由，第一种偏向于描述硬件资源。<br>

</li>
</ul>
<h2 id="关于platform-device的id"><a href="#关于platform-device的id" class="headerlink" title="关于platform_device的id"></a>关于platform_device的id</h2><blockquote>
<p>id可以不初始化吗？</p>
</blockquote>
<p>如果只有一个device，可以不初始化，默认是0.<br>如果有多个device，必须初始化，且id不能重复。<br>否则会报以下错误：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[root@imx6ull:/mnt]# insmod led_imx6ull.ko </span><br><span class="line">[ 5711.683557] [bspled_probe] pdev-&gt;id:0</span><br><span class="line">[root@imx6ull:/mnt]# </span><br><span class="line">[root@imx6ull:/mnt]# </span><br><span class="line">[root@imx6ull:/mnt]# insmod led_imx6ull2.ko </span><br><span class="line">[ 5715.843565] ------------[ cut here ]------------</span><br><span class="line">[ 5715.861461] WARNING: CPU: 0 PID: 379 at fs/sysfs/dir.c:31 sysfs_warn_dup+0x64/0x74</span><br><span class="line">[ 5715.870601] sysfs: cannot create duplicate filename '/devices/platform/bspled.0'</span><br><span class="line">[ 5715.880155] ---[ end trace fff8368841ec45e8 ]---</span><br><span class="line">[ 5715.889641] ------------[ cut here ]------------</span><br><span class="line">[ 5715.894917] WARNING: CPU: 0 PID: 379 at lib/kobject.c:240 kobject_add_internal+0x2cc/0x340</span><br><span class="line">[ 5715.903667] ---[ end trace fff8368841ec45e9 ]---</span><br><span class="line">[ 5715.912608] [imx6ull_bspled_init] platform_device_register fail</span><br><span class="line">insmod: ERROR: could not insert module led_imx6ull2.ko: File exists</span><br></pre></td></tr></table></figure>
<br>


]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>ubuntu问题汇总</title>
    <url>/2020/04/12/ubuntu%E9%97%AE%E9%A2%98%E6%B1%87%E6%80%BB/</url>
    <content><![CDATA[<p>记录常见的ubuntu使用过程中的问题，包括一些配置等。</p>
<a id="more"></a>

<h2 id="A-start-job-is-running-for-wait-for-network-to-be-Configured"><a href="#A-start-job-is-running-for-wait-for-network-to-be-Configured" class="headerlink" title="A start job is running for wait for network to be Configured"></a>A start job is running for wait for network to be Configured</h2><p>ubuntu 18.04<br>开机时会卡在这一步，原因应该是网络不通。<br>解决方式：<br><code>vim /etc/systemd/system/network-online.target.wants/systemd-networkd-wait-online.service</code><br>在[Service]标签下增加：<br><code>TimeoutStartSec=2sec</code><br><br></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
  </entry>
  <entry>
    <title>以交易为生</title>
    <url>/2020/10/04/%E4%BB%A5%E4%BA%A4%E6%98%93%E4%B8%BA%E7%94%9F/</url>
    <content><![CDATA[<p>《以交易为生》的读书笔记。</p>
<a id="more"></a>


<p>一些需要关注的指标。<br>DI、DM、KDJ、ATR、周线。<br>几个都是趋势指标。<br>补充了MACD没有的上下影线、震荡情况。<br>除了日线，周线也需要关注。</p>
]]></content>
      <categories>
        <category>交易</category>
      </categories>
  </entry>
  <entry>
    <title>串口</title>
    <url>/2020/04/12/%E4%B8%B2%E5%8F%A3/</url>
    <content><![CDATA[<p>本post介绍所有的串口。如果后续发现内容过多，不便于浏览，会对内容做拆分。<br>uart、spi、i2c等各单独一个post。</p>
<a id="more"></a>

<p>串口电平有两种：TTL，RS232（传统的9针串口）。</p>
]]></content>
      <categories>
        <category>bsp</category>
      </categories>
  </entry>
  <entry>
    <title>makefile</title>
    <url>/2020/04/24/makefile/</url>
    <content><![CDATA[<p>介绍makefile的语法等。</p>
<a id="more"></a>

<h2 id="GNUMAKE"><a href="#GNUMAKE" class="headerlink" title="GNUMAKE"></a>GNUMAKE</h2><p>大佬给我们翻译了make使用手册，非常感谢。<br><a href="https://github.com/gouchengsanren/files/blob/master/gunmake.htm" target="_blank" rel="noopener">gnumake</a>(下载后浏览器打开)<br>下面会介绍常用语法。<br><br></p>
<h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">目标（target）：依赖（prerequiries）</span><br><span class="line">&lt;tab&gt;命令（command）</span><br></pre></td></tr></table></figure>
<p>make的思想简单粗暴：<br><code>目标</code> 文件还没有，或者 <code>依赖</code> 文件有更新，就执行 <code>命令</code> 。<br><em>所以，make并不是一个编译工具，所有符合上述使用场景的，都可以使用make。<br>只是我们项目中的make都用来编译了，让我们误以为make只能用来编译。</em></p>
<p>Note：</p>
<ul>
<li>我们make常常遇到莫名的错误，先检查格式问题，<code>tab</code> 是否对，有没有错误的<br>以 <code>tab</code> 打头的空行等等</li>
<li><code>make</code> 会用 <code>shell</code> 执行 <code>command</code> 。所以command必须是手动在shell下执行<br>没有问题的。<br>


</li>
</ul>
<h2 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h2><h3 id="延时变量和即时变量"><a href="#延时变量和即时变量" class="headerlink" title="延时变量和即时变量"></a>延时变量和即时变量</h3><p>makefile中的赋值分为两种：</p>
<ul>
<li>1）延时变量；<br>   在执行时才确定。</li>
<li>2）即时变量；<br>   立即确定。</li>
</ul>
<p>例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a'makefile:</span><br><span class="line">  1 VAR = $@</span><br><span class="line">  2 VAR2 := $@</span><br><span class="line">  3 $(warning '$(VAR)','$(VAR2)')</span><br><span class="line">  4                      </span><br><span class="line">  5 a:                   </span><br><span class="line">  6     @echo \'$(VAR)\',\'$(VAR2)\'</span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:a$ make</span><br><span class="line">makefile:3: '',''</span><br><span class="line">'a',''</span><br></pre></td></tr></table></figure>
<p><code>VAR</code> 是延时变量，在执行命令时才确定。<br><code>VAR2</code> 是即时变量，写时是多少就是多少。</p>
<blockquote>
<p>那么gnu make是怎么规定哪些是延时变量，哪些是即时变量呢？</p>
</blockquote>
<table>
<thead>
<tr>
<th>举例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>VAR = xxx</td>
<td>延时变量</td>
</tr>
<tr>
<td>VAR ?= xxx</td>
<td>延时变量</td>
</tr>
<tr>
<td>VAR := xxx</td>
<td>即时变量</td>
</tr>
<tr>
<td>VAR += xxx</td>
<td>跟随原有定义，如果原来VAR是延时变量，那么现在还是延时变量，否则还是即时变量</td>
</tr>
</tbody></table>
<h3 id="变量的导出（export）"><a href="#变量的导出（export）" class="headerlink" title="变量的导出（export）"></a>变量的导出（export）</h3><p>我们在编译时，目录通常是切来切去的（通过make -C）。<br><em>注：</em><br><em>关于 <code>-C</code> ，请参考<a href="#ARCHOR_参数">参数</a>一节</em><br>一个makefile里的变量是没法在其他makefile中使用的，如果要使用，就要用 <code>export</code> 将它导出。</p>
<p>例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">├── a</span><br><span class="line">│   └── makefile</span><br><span class="line">├── b</span><br><span class="line">│   └── makefile</span><br><span class="line"></span><br><span class="line">a's makefile:</span><br><span class="line">  1 a:</span><br><span class="line">  2     @echo \'$(VAR)\'</span><br><span class="line"></span><br><span class="line">b's makefile:</span><br><span class="line">  1 VAR ?= iamvar</span><br><span class="line">  2 </span><br><span class="line">  3 b:</span><br><span class="line">  4     make -C ../a/</span><br></pre></td></tr></table></figure>
<p>b目录下执行make：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:b$ make</span><br><span class="line">make -C ../a/</span><br><span class="line">make[1]: Entering directory '/home/chuck/bsp/a'</span><br><span class="line">''</span><br><span class="line">make[1]: Leaving directory '/home/chuck/bsp/a'</span><br></pre></td></tr></table></figure>
<p>修改b makefile，将 <code>VAR</code> 导出：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1 VAR ?= iamvar</span><br><span class="line">2 export VAR</span><br><span class="line">3 </span><br><span class="line">4 b:</span><br><span class="line">5     make -C ../a/</span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:b$ make</span><br><span class="line">make -C ../a</span><br><span class="line">make[1]: Entering directory '/home/chuck/bsp/a'</span><br><span class="line">'iamvar'</span><br><span class="line">make[1]: Leaving directory '/home/chuck/bsp/a'</span><br></pre></td></tr></table></figure>
<br>


<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>介绍makefile中常用的函数。</p>
<h3 id="foreach"><a href="#foreach" class="headerlink" title="foreach"></a>foreach</h3><p><code>$(foreach i, list, newi)</code><br>遍历 <code>list</code> 中的每一项元素（<code>i</code>），将其改成 <code>newi</code> 的形式。</p>
<h3 id="wildcard"><a href="#wildcard" class="headerlink" title="wildcard"></a>wildcard</h3><p><code>$(wildcard pattern)</code><br>把符合 <code>pattern</code> 描述的文件都列出来。<br>pattern可以是切实的文件：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; $(wildcard a)</span><br><span class="line">检查a是否存在，存在还是a（它自己），不存在就是空。</span><br><span class="line">这里的a也可以是列表。</span><br></pre></td></tr></table></figure>
<p>也可以是通配符：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">a &#x3D; $(wildcard *.c)</span><br></pre></td></tr></table></figure>

<h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><p><code>$(shell xxx)</code></p>
<h3 id="filter-filter-out"><a href="#filter-filter-out" class="headerlink" title="filter / filter-out"></a>filter / filter-out</h3><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p><code>$(filter pattern, xxx)</code><br>把xxx中符合pattern的<font color=red><strong>过滤出来</strong></font>。</p>
<p>例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1 obj-y := a.o b.o c/ d/</span><br><span class="line">2 DIR := $(filter %/, $(obj-y))</span><br><span class="line">3 NDIR := $(filter-out %/, $(obj-y))</span><br><span class="line">4 </span><br><span class="line">5 a:</span><br><span class="line">6     @echo $(DIR)</span><br><span class="line">7     @echo $(NDIR)</span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:a$ make</span><br><span class="line">c/ d/</span><br><span class="line">a.o b.o</span><br></pre></td></tr></table></figure>

<h4 id="filter-out"><a href="#filter-out" class="headerlink" title="filter-out"></a>filter-out</h4><p><code>$(filter-out pattern, xxx)</code><br>把xxx中符合pattern的<font color=red><strong>过滤掉</strong></font>。</p>
<h3 id="patsubst"><a href="#patsubst" class="headerlink" title="patsubst"></a>patsubst</h3><p><code>$(patsubst pattern, replacement, xxx)</code><br>把xxx中符合pattern的替换成replacement。<br>patsubst这个名字不好记。</p>
<p>例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1 obj-y := a.c b.o c/ d/</span><br><span class="line">2 VAR := $(patsubst %/, %, $(obj-y))</span><br><span class="line">3 VAR := $(patsubst %.c, %.o, $(VAR))</span><br><span class="line">4                              </span><br><span class="line">5 a:</span><br><span class="line">6     @echo $(VAR)</span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:a$ make</span><br><span class="line">a.o b.o c d</span><br></pre></td></tr></table></figure>
<br>


<h2 id="假目标（-PHONY）"><a href="#假目标（-PHONY）" class="headerlink" title="假目标（.PHONY）"></a>假目标（.PHONY）</h2><p>我们makefile中会有写 <code>clean</code> 目标，用来清除编译环境。<br>如果目录下恰巧有一个 <code>clean文件</code> ，那么make就会不执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">b's makefile:</span><br><span class="line">  1 VAR ?= iamvar</span><br><span class="line">  2 export VAR</span><br><span class="line">  3 </span><br><span class="line">  4 b:</span><br><span class="line">  5     make -C ../a/</span><br><span class="line">  6 </span><br><span class="line">  7 clean:</span><br><span class="line">  8     @echo "clean"</span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:b$ &gt;clean</span><br><span class="line">chuck@chuck11:b$ make clean</span><br><span class="line">make: 'clean' is up to date.</span><br></pre></td></tr></table></figure>
<p>这种情况，我们需要告诉make，这个target指定时，一定要被执行。<br>使用 <code>.PHONY</code> （phony的意思是‘假的’）:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"> 1 VAR ?= iamvar</span><br><span class="line"> 2 export VAR</span><br><span class="line"> 3 </span><br><span class="line"> 4 .PHONY: clean               //指定哪些是虚假目标</span><br><span class="line"> 5        </span><br><span class="line"> 6 b:</span><br><span class="line"> 7     make -C ../a/</span><br><span class="line"> 8 </span><br><span class="line"> 9 clean:</span><br><span class="line">10     @echo "clean"</span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:b$ make clean</span><br><span class="line">clean</span><br></pre></td></tr></table></figure>
<br>


<h2 id="参数"><a href="#参数" class="headerlink" title="参数"></a><a name="ARCHOR_参数">参数</a></h2><h3 id="make-f"><a href="#make-f" class="headerlink" title="make -f"></a>make -f</h3><p><code>-f</code> 选项用来指定makefile。<br>默认情况下，是使用当前目录下的makefile。<br>例：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">├── a</span><br><span class="line">│   └── makefile</span><br><span class="line">├── b</span><br><span class="line">│   └── makefile</span><br><span class="line"></span><br><span class="line">a's makefile:</span><br><span class="line">  1 $(warning $(shell pwd))</span><br><span class="line"></span><br><span class="line">b's makefile:</span><br><span class="line">  1 $(warning $(shell pwd))    </span><br><span class="line">  2 </span><br><span class="line">  3 b:</span><br><span class="line">  4     make -f ../a/makefile</span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:b$ make</span><br><span class="line">makefile:1: /home/chuck/bsp/b                   //打出了b makefile warning</span><br><span class="line">make -f ../a/makefile                           //执行第一个target</span><br><span class="line">make[1]: Entering directory '/home/chuck/bsp/b' //进入b目录</span><br><span class="line">../a/makefile:1: /home/chuck/bsp/b              //使用a makefile，a makefile warning打出，</span><br><span class="line">                                                  因为当前目录是b，所以打出的是b目录</span><br><span class="line">make[1]: *** No targets.  Stop.</span><br><span class="line">make[1]: Leaving directory '/home/chuck/bsp/b'</span><br><span class="line">makefile:4: recipe for target 'b' failed</span><br><span class="line">make: *** [b] Error 2</span><br></pre></td></tr></table></figure>
<p>我们给a makefile加2个目标：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1 $(warning $(shell pwd))    </span><br><span class="line">2 </span><br><span class="line">3 a:</span><br><span class="line">4     @echo aaa</span><br><span class="line">5 </span><br><span class="line">6 b:</span><br><span class="line">7     @echo bbb</span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:b$ make</span><br><span class="line">makefile:1: /home/chuck/bsp/b</span><br><span class="line">make -f ../a/makefile</span><br><span class="line">make[1]: Entering directory '/home/chuck/bsp/b'</span><br><span class="line">../a/makefile:1: /home/chuck/bsp/b</span><br><span class="line">aaa         //执行的第一个目标a，不是b。其实，make -f ../a/makefile的效果和将a的makefile拷贝</span><br><span class="line">              到当前目录，再执行make是一样的。没有目标传递的说法。</span><br><span class="line">make[1]: Leaving directory '/home/chuck/bsp/b'</span><br></pre></td></tr></table></figure>

<h3 id="make-C"><a href="#make-C" class="headerlink" title="make -C"></a>make -C</h3><p><code>-C</code> 指切换到其他目录。<br>我们编译驱动就会指定 <code>-C</code> 为内核根目录。<br>还是使用上面小结的a、b的makeifle。<br>修改一下：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">1 $(warning $(shell pwd))    </span><br><span class="line">2 </span><br><span class="line">3 b:</span><br><span class="line">4     #make -f ../a/makefile</span><br><span class="line">5     make -C ../a/</span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:b$ make</span><br><span class="line">makefile:1: /home/chuck/bsp/b</span><br><span class="line"><span class="meta">#</span><span class="bash">make -f ../a/makefile</span></span><br><span class="line">make -C ../a/</span><br><span class="line">make[1]: Entering directory '/home/chuck/bsp/a'     //目录变了，执行-C的效果和cd到a目录，再执行</span><br><span class="line">                                                      make效果是一样的。</span><br><span class="line">makefile:1: /home/chuck/bsp/a</span><br><span class="line">aaa</span><br><span class="line">make[1]: Leaving directory '/home/chuck/bsp/a'</span><br></pre></td></tr></table></figure>
<br>


<h2 id="通用makefile"><a href="#通用makefile" class="headerlink" title="通用makefile"></a>通用makefile</h2><p>参考韦老师的通用makefile写了一个。<br><a href="https://github.com/gouchengsanren/files/tree/master/general_makefile" target="_blank" rel="noopener">通用makefile</a></p>
<p>简单说两句。<br>目录结构：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">.</span><br><span class="line">├── a.c</span><br><span class="line">├── include</span><br><span class="line">│   ├── a.h</span><br><span class="line">│   └── sub_a.h</span><br><span class="line">├── main.c</span><br><span class="line">├── makefile                    //当前目录makefile</span><br><span class="line">├── makefile.build              //会去包含当前目录的makefile</span><br><span class="line">└── sub</span><br><span class="line">    ├── makefile                //当前目录makefile，当然对于根目录，它是字目录</span><br><span class="line">    └── sub_a.c</span><br></pre></td></tr></table></figure>

<p>学到1点：</p>
<ul>
<li>目标永远是在make读完所有配置后才去执行，目标写前面也不会先执行</li>
</ul>
<p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">chuck@chuck11:general_makefile$ make</span><br><span class="line">make -C ./ -f /home/chuck/github/gouchengsanren/files/general_makefile/makefile.build</span><br><span class="line">make[1]: Entering directory '/home/chuck/github/gouchengsanren/files/general_makefile'</span><br><span class="line">make -C sub -f /home/chuck/github/gouchengsanren/files/general_makefile/makefile.build</span><br><span class="line">make[2]: Entering directory '/home/chuck/github/gouchengsanren/files/general_makefile/sub'</span><br><span class="line">gcc -Wall -O2 -g -I /home/chuck/github/gouchengsanren/files/general_makefile/include -D DEBUG -D SUBA_VAL=10 -Wp,-MD,.sub_a.o.d -c -o sub_a.o sub_a.c</span><br><span class="line">ld -r -o built-in.o sub_a.o</span><br><span class="line">make[2]: Leaving directory '/home/chuck/github/gouchengsanren/files/general_makefile/sub'</span><br><span class="line">gcc -Wall -O2 -g -I /home/chuck/github/gouchengsanren/files/general_makefile/include   -Wp,-MD,.main.o.d -c -o main.o main.c</span><br><span class="line">gcc -Wall -O2 -g -I /home/chuck/github/gouchengsanren/files/general_makefile/include   -Wp,-MD,.a.o.d -c -o a.o a.c</span><br><span class="line">ld -r -o built-in.o main.o a.o sub/built-in.o</span><br><span class="line">make[1]: Leaving directory '/home/chuck/github/gouchengsanren/files/general_makefile'</span><br><span class="line">gcc -o app built-in.o </span><br><span class="line">app has been built!</span><br></pre></td></tr></table></figure>
<p>过程：</p>
<ul>
<li>1）编译app，build-in.o</li>
<li>2）build-in.o，需要sub/build-in.o main.o a.o</li>
<li>3）对于sub/build-in.o，它因为没有子目录，所以只需要sub_a.o</li>
</ul>
<p>思想很简单，makefile不好写。</p>
]]></content>
      <categories>
        <category>compile</category>
      </categories>
  </entry>
  <entry>
    <title>scanf</title>
    <url>/2020/10/04/scanf/</url>
    <content><![CDATA[<p>关于scanf的返回值。</p>
<a id="more"></a>

<p>scanf返回成功赋值的个数。<br>如果1个都没有，返回的是-1（注意不是0）。<br><code>while (scanf(xxx) == n)</code>一定要判断，因为空行返回的是-1，会死循环的！</p>
<blockquote>
<p>示例</p>
</blockquote>
<p><code>input</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">6</span></span><br><span class="line"><span class="number">2</span> <span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span></span><br></pre></td></tr></table></figure>

<p><code>code</code></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">ret = <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ret:%d, %d, %d, %d\n"</span>, ret,a,b,c);</span><br><span class="line">ret = <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ret:%d, %d, %d, %d\n"</span>, ret,a,b,c);</span><br><span class="line">ret = <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ret:%d, %d, %d, %d\n"</span>, ret,a,b,c);</span><br><span class="line">ret = <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;c);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"ret:%d, %d, %d, %d\n"</span>, ret,a,b,c)</span><br></pre></td></tr></table></figure>

<p><code>terminal</code></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">ret:3, 2, 1, 6</span><br><span class="line">ret:3, 2, 1, 3</span><br><span class="line">ret:2, 3, 4, 3</span><br><span class="line">ret:-1, 3, 4, 3</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>acm</category>
      </categories>
  </entry>
  <entry>
    <title>墙布墙纸乳胶漆</title>
    <url>/2020/06/28/%E5%A2%99%E5%B8%83%E5%A2%99%E7%BA%B8%E4%B9%B3%E8%83%B6%E6%BC%86/</url>
    <content><![CDATA[<p>家里的墙，交付的是乳胶漆。<br>宁海华东家具的经理建议贴墙布，当然有赚钱的成分在。<br>墙，有3种装饰方式：</p>
<ul>
<li>刷漆，单色的</li>
<li>墙纸，平的</li>
<li>墙布，凹凸不平的，立体的<br>价格方面，墙布 &gt; 墙布 &gt; 乳胶漆。我最后选择的是乳胶漆，后面说说原因。<a id="more"></a>

</li>
</ul>
<p>墙纸、墙布色彩丰富。但我本人不喜欢花里胡哨的，我喜欢极简。这是我选择乳胶漆（白墙）的最主要原因。<br>从环保上看，墙纸、墙布本身材质没问题，但染料和胶水有甲醛。一屋子贴满，何必呢。<br>从视觉效果看，本身每个房间就不大，贴的花里胡哨的，加上墙布还挺厚的，视觉上房间就更小了，何必呢。<br>以后还会有个娃，白墙=天然的画布，小孩随便画，想怎么创作怎么创作。等孩子长大了，把这些作品拍下来，都是美好的回忆。如果需要，重新刷漆就好。<br>即使是电视背景墙，我也不做任何背景。简单即是美。<br>基于上面这些原因，一锤子定死乳胶漆。</p>
]]></content>
      <categories>
        <category>家</category>
      </categories>
  </entry>
  <entry>
    <title>家具木种</title>
    <url>/2020/06/27/%E5%AE%B6%E5%85%B7%E6%9C%A8%E7%A7%8D/</url>
    <content><![CDATA[<p>软装，买家具。颗粒板、多层板、实木板，最后还是选择实木板。毕竟是家，环保第一位，为了亲爱的老婆娃、家人们。<br>实木贵是贵些，但毕竟是可以用10好几年的，买好一些。<br>实木里有拼接的、指接的、榫卯的。后面两种在宁海华东家具没看到，买的拼接的。<br>关于木种，有不少，也做下记录。<br>先记录宁海这次碰到较多的，其他如果有需要再记录。</p>
<p>关于买成品还是定制。两位经理给的意见都是买成品，定制贵花冤枉钱，而且会让有限的空间看起来更小，更压抑。<br>最后买的都是成品，加上实木，甲醛就不是头痛的点了。</p>
<a id="more"></a>

<h2 id="木种的档位"><a href="#木种的档位" class="headerlink" title="木种的档位"></a>木种的档位</h2><p><a href="https://www.zhihu.com/question/24335160/answer/465010340" target="_blank" rel="noopener">参考</a></p>
<ul>
<li>第一梯队：<br><code>大果紫檀 / 缅甸花梨</code>，最好的红木<br><code>黑胡桃 / 黑核桃 / 北美黑胡桃</code>，完美的家具木材</li>
<li>第二梯队：<br><code>樱桃木 / 红樱桃 / 黑樱桃；白橡木 / 白栎木；乌金木 / 斑马木白蜡木 / 美国水曲柳；红橡木；刺猬紫檀 / 非洲花梨非洲紫檀 / 亚花梨；水曲柳；欧洲橡木 / 柞木;榆木；榉木 / 山毛榉 / 红榉 ；柚木 / 马来柚木 / 老挝柚木；美国赤杨 / 赤桦 / 北美桤木 / 南美樱桃木；美国黄杨 / 北美鹅掌楸；楸木 / 核桃楸 / 胡桃楸</code></li>
<li>第三梯队：<br><code>菠萝格 / 印咖木；金丝檀木；胡桃木 / 南美胡桃 / 非洲胡桃 / 金丝胡桃 / 巴新胡桃 / 红胡桃；檀丝木 / 斯文漆木；瑞格楠木；红檀木 / 奥古曼；金丝柚木 / 榄仁木；非洲柚木；南美胡桃木 / 南美樱桃木 / 南美柚木 / 巴西柚木；红椿木；海棠木；金合欢；相思木 / 玫瑰木；橡胶木</code></li>
<li>第四梯队：<br><code>松木；桦木；桐木</code>，邻居有用松木实木的，松木木质疏松，油脂多有气味，实际上并不适合做家具。但是它确实便宜。邻居同户型做下来7万（杭州的价格，没有包括沙发，餐桌应该，只是柜子。但在杭州算是很便宜了，毕竟实木的）。<br>


</li>
</ul>
<h2 id="黑胡桃木"><a href="#黑胡桃木" class="headerlink" title="黑胡桃木"></a>黑胡桃木</h2><p>木色是我最喜欢的。算是家具中比较高端的一种木种。<br>宁海华东家具看到的黑胡桃都是北美黑胡桃（没有见过其他黑胡桃）。<code>北美黑胡桃是北美进口材中最贵的</code>。<br>一般是：</p>
<ul>
<li>纯黑胡桃</li>
<li>黑胡桃 + <code>柚木</code></li>
<li>黑胡桃 + 多层板<br>后两种，是框架用的黑胡桃，其他背板、侧板等用的辅材。</li>
</ul>
<p>这种木种很贵，通常是只用它的木皮。但是宁海华东家具的实木确实便宜。<br>以下是摘录：<br>用于桌面、椅面、钢琴表面、汽车内饰、会所装潢。<br>黑胡桃木有极好的着油漆及染料性能（上漆、上木蜡油），抛光后能获得特佳的表面。<br>黑胡桃木家具有良好的尺寸稳定性，抗腐蚀能力极强。<br>密度高，0.66-0.68，红木是0.72。因此黑胡桃木经久耐用、不容易开裂。经得起岁月洗礼。<br><br></p>
<h2 id="柚木"><a href="#柚木" class="headerlink" title="柚木"></a>柚木</h2><p>就是上面提到的辅材。<br>柚木也有好坏分。缅甸柚木比北美黑胡桃还贵。<br>柚木产地有：缅甸、泰国、印度、印尼、老挝。<br>柚木的颜色没黑胡桃那么暗，有些还偏红。<br>柚木稳定性也非常好。<br><br></p>
<h2 id="乌金木"><a href="#乌金木" class="headerlink" title="乌金木"></a>乌金木</h2><p>属于比较差的木种。和黑胡桃比起来，家具要便宜很多。<br>容易开裂、腐蚀。<br><br></p>
]]></content>
      <categories>
        <category>家</category>
      </categories>
  </entry>
  <entry>
    <title>车企</title>
    <url>/2020/10/11/%E8%BD%A6%E4%BC%81/</url>
    <content><![CDATA[<p>常见车，以及所属车企。</p>
<a id="more"></a>

<h2 id="日系"><a href="#日系" class="headerlink" title="日系"></a>日系</h2><h3 id="三菱集团"><a href="#三菱集团" class="headerlink" title="三菱集团"></a>三菱集团</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E4%B8%89%E8%8F%B1.png?raw=true" class="">
<p>什么都做，采矿、造船、银行、保险、钢铁、玻璃、电气设备、飞机、石油、房地产、汽车。</p>
<h3 id="丰田汽车"><a href="#丰田汽车" class="headerlink" title="丰田汽车"></a>丰田汽车</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E4%B8%B0%E7%94%B0.png?raw=true" class="">

<h3 id="丰田-皇冠"><a href="#丰田-皇冠" class="headerlink" title="丰田-皇冠"></a>丰田-皇冠</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E7%9A%87%E5%86%A0.png?raw=true" class="">

<h3 id="丰田-雷克萨斯"><a href="#丰田-雷克萨斯" class="headerlink" title="丰田-雷克萨斯"></a>丰田-雷克萨斯</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E9%9B%B7%E5%85%8B%E8%90%A8%E6%96%AF.png?raw=true" class="">

<h3 id="日产（尼桑）"><a href="#日产（尼桑）" class="headerlink" title="日产（尼桑）"></a>日产（尼桑）</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%B0%BC%E6%A1%91.png?raw=true" class="">

<h3 id="日产-英菲尼迪"><a href="#日产-英菲尼迪" class="headerlink" title="日产-英菲尼迪"></a>日产-英菲尼迪</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E8%8B%B1%E8%8F%B2%E5%B0%BC%E8%BF%AA.png?raw=true" class="">

<h3 id="斯巴鲁"><a href="#斯巴鲁" class="headerlink" title="斯巴鲁"></a>斯巴鲁</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E6%96%AF%E5%B7%B4%E9%B2%81.png?raw=true" class="">

<h3 id="本田"><a href="#本田" class="headerlink" title="本田"></a>本田</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E6%9C%AC%E7%94%B0.png?raw=true" class="">
<p>汽车、摩托车。</p>
<h3 id="铃木"><a href="#铃木" class="headerlink" title="铃木"></a>铃木</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E9%93%83%E6%9C%A8.png?raw=truhttps://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E9%93%83%E6%9C%A8.png?raw=truee" class="">

<h3 id="马自达"><a href="#马自达" class="headerlink" title="马自达"></a>马自达</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E9%A9%AC%E8%87%AA%E8%BE%BE.png?raw=true" class="">
<br>

<h2 id="韩系"><a href="#韩系" class="headerlink" title="韩系"></a>韩系</h2><h3 id="现代"><a href="#现代" class="headerlink" title="现代"></a>现代</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E7%8E%B0%E4%BB%A3.png?raw=true" class="">
<p>国内的有北京现代。中外合资的。</p>
<h3 id="起亚"><a href="#起亚" class="headerlink" title="起亚"></a>起亚</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E8%B5%B7%E4%BA%9A.png?raw=true" class="">
<br>

<h2 id="德系"><a href="#德系" class="headerlink" title="德系"></a>德系</h2><h3 id="大众集团"><a href="#大众集团" class="headerlink" title="大众集团"></a>大众集团</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%A4%A7%E4%BC%97.png?raw=true" class="">
<p>欧洲最大的汽车公司。<br>旗下有：</p>
<img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%A4%A7%E4%BC%97%E6%97%97%E4%B8%8B%E5%93%81%E7%89%8C.png?raw=true" class="">

<h3 id="大众-保时捷"><a href="#大众-保时捷" class="headerlink" title="大众-保时捷"></a>大众-保时捷</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E4%BF%9D%E6%97%B6%E6%8D%B7.png?raw=true" class="">
<p>名字取自创始人：费迪南德·保时捷（又译费迪南德·波尔舍，Ferdinand Porsche）。汽车设计大师。<br>现在也属于大众了。</p>
<h3 id="大众-兰博基尼"><a href="#大众-兰博基尼" class="headerlink" title="大众-兰博基尼"></a>大众-兰博基尼</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%85%B0%E5%8D%9A%E5%9F%BA%E5%B0%BC.png?raw=true" class="">
<p>意大利的。名字取自创始人：费鲁吉欧·兰博基尼。<br>已经破产，被奥迪收了，也就是现在兰博基尼属于大众集团的车。（奥迪是大众子公司）</p>
<h3 id="大众-奥迪"><a href="#大众-奥迪" class="headerlink" title="大众-奥迪"></a>大众-奥迪</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%A5%A5%E8%BF%AA.png?raw=true" class="">

<h3 id="大众-宾利"><a href="#大众-宾利" class="headerlink" title="大众-宾利"></a>大众-宾利</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%AE%BE%E5%88%A9.png?raw=true" class="">
<p>英国的。被大众收了。</p>
<h3 id="大众-布加迪"><a href="#大众-布加迪" class="headerlink" title="大众-布加迪"></a>大众-布加迪</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%B8%83%E5%8A%A0%E8%BF%AA.png?raw=true" class="">
<p>意大利的。被大众收了。总部设在法国。跑车。</p>
<h3 id="奔驰"><a href="#奔驰" class="headerlink" title="奔驰"></a>奔驰</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%A5%94%E9%A9%B0.png?raw=true" class="">
<p>全程，梅赛德斯-奔驰（Mercedes-Benz）。戴姆勒梅赛德斯奔驰汽车公司。</p>
<h3 id="奔驰-迈巴赫（梅赛德斯-迈巴赫）"><a href="#奔驰-迈巴赫（梅赛德斯-迈巴赫）" class="headerlink" title="奔驰-迈巴赫（梅赛德斯-迈巴赫）"></a>奔驰-迈巴赫（梅赛德斯-迈巴赫）</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E8%BF%88%E5%B7%B4%E8%B5%AB.png?raw=true" class="">
<p>迈巴赫被奔驰收购了。</p>
<h3 id="宝马（BMW集团）"><a href="#宝马（BMW集团）" class="headerlink" title="宝马（BMW集团）"></a>宝马（BMW集团）</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%AE%9D%E9%A9%AC.png?raw=true" class="">

<h3 id="宝马-宝马mini"><a href="#宝马-宝马mini" class="headerlink" title="宝马-宝马mini"></a>宝马-宝马mini</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%AE%9D%E9%A9%ACmini.png?raw=true" class="">
<p>英国的，被宝马收了。做微型车的。<br><br></p>
<h2 id="美系"><a href="#美系" class="headerlink" title="美系"></a>美系</h2><h3 id="通用汽车"><a href="#通用汽车" class="headerlink" title="通用汽车"></a>通用汽车</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E7%BE%8E%E5%9B%BD%E9%80%9A%E7%94%A8%E6%B1%BD%E8%BD%A6.png?raw=true" class="">

<h3 id="通用-凯迪拉克"><a href="#通用-凯迪拉克" class="headerlink" title="通用-凯迪拉克"></a>通用-凯迪拉克</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%87%AF%E8%BF%AA%E6%8B%89%E5%85%8B.png?raw=true" class="">

<h3 id="通用-别克"><a href="#通用-别克" class="headerlink" title="通用-别克"></a>通用-别克</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%88%AB%E5%85%8B.png?raw=true" class="">

<h3 id="通用-雪佛兰"><a href="#通用-雪佛兰" class="headerlink" title="通用-雪佛兰"></a>通用-雪佛兰</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E9%9B%AA%E4%BD%9B%E5%85%B0.png?raw=true" class="">

<h3 id="克莱斯勒"><a href="#克莱斯勒" class="headerlink" title="克莱斯勒"></a>克莱斯勒</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%85%8B%E8%8E%B1%E6%96%AF%E5%8B%92.png?raw=true" class="">

<h3 id="克莱斯勒-吉普"><a href="#克莱斯勒-吉普" class="headerlink" title="克莱斯勒-吉普"></a>克莱斯勒-吉普</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%90%89%E6%99%AE.png?raw=true" class="">

<h3 id="克莱斯勒-玛莎拉蒂"><a href="#克莱斯勒-玛莎拉蒂" class="headerlink" title="克莱斯勒-玛莎拉蒂"></a>克莱斯勒-玛莎拉蒂</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E7%8E%9B%E8%8E%8E%E6%8B%89%E8%92%82.png?raw=true" class="">
<p>意大利的。被克莱斯勒收了。</p>
<h3 id="悍马"><a href="#悍马" class="headerlink" title="悍马"></a>悍马</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E6%82%8D%E9%A9%AC.png?raw=true" class="">

<h3 id="福特"><a href="#福特" class="headerlink" title="福特"></a>福特</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E7%A6%8F%E7%89%B9.png?raw=true" class="">

<h3 id="福特-林肯"><a href="#福特-林肯" class="headerlink" title="福特-林肯"></a>福特-林肯</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E6%9E%97%E8%82%AF.png?raw=true" class="">

<h3 id="特斯拉"><a href="#特斯拉" class="headerlink" title="特斯拉"></a>特斯拉</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E7%89%B9%E6%96%AF%E6%8B%89.png?raw=true" class="">
<br>

<h2 id="英系"><a href="#英系" class="headerlink" title="英系"></a>英系</h2><h3 id="劳斯莱斯"><a href="#劳斯莱斯" class="headerlink" title="劳斯莱斯"></a>劳斯莱斯</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%8A%B3%E6%96%AF%E8%8E%B1%E6%96%AF.png?raw=true" class="">
<p>名字取自公司创始人Frederick Henry Royce（亨利·莱斯）和Charles Stewart Rolls（查理·劳斯）。</p>
<h3 id="捷豹"><a href="#捷豹" class="headerlink" title="捷豹"></a>捷豹</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E6%8D%B7%E8%B1%B9.png?raw=true" class="">
<p>跑车。<br><br></p>
<h2 id="印系（印度）"><a href="#印系（印度）" class="headerlink" title="印系（印度）"></a>印系（印度）</h2><h3 id="塔塔汽车集团"><a href="#塔塔汽车集团" class="headerlink" title="塔塔汽车集团"></a>塔塔汽车集团</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%A1%94%E5%A1%94.png?raw=true" class="">

<h3 id="塔塔-路虎"><a href="#塔塔-路虎" class="headerlink" title="塔塔-路虎"></a>塔塔-路虎</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E8%B7%AF%E8%99%8E.png?raw=true" class="">
<p>全地形SUV。总部是在英国。也算是英国的车。从福特公司手中收购的。<br><br></p>
<h2 id="法系"><a href="#法系" class="headerlink" title="法系"></a>法系</h2><h3 id="标致雪铁龙集团"><a href="#标致雪铁龙集团" class="headerlink" title="标致雪铁龙集团"></a>标致雪铁龙集团</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E6%A0%87%E8%87%B4.png?raw=true" class="">
<p>标致吞并了雪铁龙，变成了标致雪铁龙。</p>
<h3 id="标致雪铁龙-雪铁龙"><a href="#标致雪铁龙-雪铁龙" class="headerlink" title="标致雪铁龙-雪铁龙"></a>标致雪铁龙-雪铁龙</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E9%9B%AA%E9%93%81%E9%BE%99.png?raw=true" class="">

<h3 id="雷诺"><a href="#雷诺" class="headerlink" title="雷诺"></a>雷诺</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E9%9B%B7%E8%AF%BA.png?raw=true" class="">
<br>

<h2 id="意系（意大利）"><a href="#意系（意大利）" class="headerlink" title="意系（意大利）"></a>意系（意大利）</h2><h3 id="法拉利"><a href="#法拉利" class="headerlink" title="法拉利"></a>法拉利</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E6%B3%95%E6%8B%89%E5%88%A9.png?raw=true" class="">
<p>一级方程式赛车、跑车。<br><br></p>
<h2 id="国产"><a href="#国产" class="headerlink" title="国产"></a>国产</h2><h3 id="东风汽车"><a href="#东风汽车" class="headerlink" title="东风汽车"></a>东风汽车</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E4%B8%9C%E9%A3%8E%E6%B1%BD%E8%BD%A6.png?raw=true" class="">
<p>中国四大汽车集团之一。（东风、一汽、上汽、长安）</p>
<img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E4%B8%AD%E5%9B%BD%E5%9B%9B%E5%A4%A7%E6%B1%BD%E8%BD%A6%E9%9B%86%E5%9B%A2.png?raw=true" class="">

<h3 id="华晨汽车集团"><a href="#华晨汽车集团" class="headerlink" title="华晨汽车集团"></a>华晨汽车集团</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E4%B8%AD%E5%8D%8E.png?raw=true" class="">
<p>底下有中华、华晨宝马。</p>
<h3 id="中国一汽"><a href="#中国一汽" class="headerlink" title="中国一汽"></a>中国一汽</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E4%B8%AD%E5%9B%BD%E4%B8%80%E6%B1%BD.png?raw=true" class="">
<p>中国四大汽车集团之一。（东风、一汽、上汽、长安）<br>有一汽大众、一汽丰田、一汽奥迪等等。</p>
<h3 id="一汽-红旗"><a href="#一汽-红旗" class="headerlink" title="一汽-红旗"></a>一汽-红旗</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E7%BA%A2%E6%97%97.png?raw=true" class="">

<h3 id="五菱汽车"><a href="#五菱汽车" class="headerlink" title="五菱汽车"></a>五菱汽车</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E4%BA%94%E8%8F%B1.png?raw=true" class="">
<p>和三菱毛关系没有。</p>
<h3 id="众泰汽车"><a href="#众泰汽车" class="headerlink" title="众泰汽车"></a>众泰汽车</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E4%BC%97%E6%B3%B0.png?raw=true" class="">
<p>浙江的。</p>
<h3 id="前途汽车"><a href="#前途汽车" class="headerlink" title="前途汽车"></a>前途汽车</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%89%8D%E9%80%94%E6%B1%BD%E8%BD%A6.png?raw=true" class="">
<p>电动车。</p>
<h3 id="北京汽车"><a href="#北京汽车" class="headerlink" title="北京汽车"></a>北京汽车</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%8C%97%E4%BA%AC%E6%B1%BD%E8%BD%A6.png?raw=true" class="">

<h3 id="吉利汽车"><a href="#吉利汽车" class="headerlink" title="吉利汽车"></a>吉利汽车</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%90%89%E5%88%A9.png?raw=true" class="">
<p>浙江宁波的。把沃尔沃收购了。</p>
<h3 id="吉利-沃尔沃"><a href="#吉利-沃尔沃" class="headerlink" title="吉利-沃尔沃"></a>吉利-沃尔沃</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E6%B2%83%E5%B0%94%E6%B2%83.png?raw=true" class="">
<p>瑞典的。先被福特收了。现在属于吉利。</p>
<h3 id="长城汽车"><a href="#长城汽车" class="headerlink" title="长城汽车"></a>长城汽车</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E9%95%BF%E5%9F%8E.png?raw=true" class="">

<h3 id="长城-哈弗"><a href="#长城-哈弗" class="headerlink" title="长城-哈弗"></a>长城-哈弗</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%93%88%E5%BC%97.png?raw=true" class="">
<p>长城汽车子品牌。SUV。</p>
<h3 id="奇瑞"><a href="#奇瑞" class="headerlink" title="奇瑞"></a>奇瑞</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%A5%87%E7%91%9E.png?raw=true" class="">

<h3 id="小鹏汽车"><a href="#小鹏汽车" class="headerlink" title="小鹏汽车"></a>小鹏汽车</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%B0%8F%E9%B9%8F%E6%B1%BD%E8%BD%A6.png?raw=true" class="">
<p>广州的。做电动车的。</p>
<h3 id="广汽传祺"><a href="#广汽传祺" class="headerlink" title="广汽传祺"></a>广汽传祺</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E5%B9%BF%E6%B1%BD%E4%BC%A0%E7%A5%BA.png?raw=true" class="">
<p>广汽的。</p>
<h3 id="比亚迪"><a href="#比亚迪" class="headerlink" title="比亚迪"></a>比亚迪</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E6%AF%94%E4%BA%9A%E8%BF%AA.png?raw=true" class="">
<p>深圳的。电动车。</p>
<h3 id="蔚来"><a href="#蔚来" class="headerlink" title="蔚来"></a>蔚来</h3><img src="https://github.com/gouchengsanren/images/blob/master/blog/auto-logo-%E8%94%9A%E6%9D%A5.png?raw=true" class="">
<p>安徽的。电动车。<br><br></p>
]]></content>
      <categories>
        <category>汽车</category>
      </categories>
  </entry>
  <entry>
    <title>常用药</title>
    <url>/2020/05/17/%E5%B8%B8%E7%94%A8%E8%8D%AF/</url>
    <content><![CDATA[<p>记录一些常用的药品。</p>
<a id="more"></a>

<h2 id="夫西地酸乳膏"><a href="#夫西地酸乳膏" class="headerlink" title="夫西地酸乳膏"></a>夫西地酸乳膏</h2><p>细菌性皮肤感染。<br>治脚气效果特别好。<br>其他的皮肤类应该都可以用。<br><br></p>
<h2 id="strataderm自风干型疤痕护理硅凝胶"><a href="#strataderm自风干型疤痕护理硅凝胶" class="headerlink" title="strataderm自风干型疤痕护理硅凝胶"></a>strataderm自风干型疤痕护理硅凝胶</h2><p>RMB:398<br>头上的疤用的这个。<br>滨江二院医生配的药。<br><br></p>
]]></content>
      <categories>
        <category>家</category>
      </categories>
  </entry>
  <entry>
    <title>知行合一</title>
    <url>/2020/04/18/%E7%9F%A5%E8%A1%8C%E5%90%88%E4%B8%80/</url>
    <content><![CDATA[<p>记录自己对 <code>知行合一</code> 的理解和感悟。</p>
<a id="more"></a>

<h2 id="大众的理解"><a href="#大众的理解" class="headerlink" title="大众的理解"></a>大众的理解</h2><p>知行合一，大家都听过，但大多数人的理解和王阳明讲的还是有很大差距。<br>绝大对数人的理解是：</p>
<ul>
<li>知道，但不去做，跟不知道一样</li>
<li>不知道，就去做，做了等于白做</li>
</ul>
<p>强调，做事情前要先了解相关的知识。光了解知识不行，得付出实践。</p>
<p>这样的理解是“对”的（注意我打的引号），但为什么我们就做不到呢。<br>我也在思考，我想原因是残酷的：</p>
<ul>
<li>我们所认为的 <code>知道</code> 其实是 <code>不知道</code> ，只是半瓶醋晃荡。<br>我们做事时，明明是我做过的事，为什么还是 <code>不会</code> ，总是 <code>犹豫</code> 、<br><code>不果断</code> ，甚至还要 <code>重新学一遍</code> 呢！！！<br><em>不论是生活中，还是工作中，你仔细想想。这种情况比比皆是。</em></li>
<li>不论学什么，总想先学了再说，永远动不起来。<br>结果就是又回到上面的一点！！！</li>
</ul>
<p>了解阳明心学后，给了我很大的冲击，醍醐灌顶。<br><br></p>
<h2 id="先贤的理解"><a href="#先贤的理解" class="headerlink" title="先贤的理解"></a>先贤的理解</h2><p>我们先来看看先贤们是怎么看待 <code>知行</code> 的。</p>
<p><strong>尚书</strong><br><code>知之匪艰 行之惟艰</code><br>知道并不难，行动才难。<br><br></p>
<p><strong>知礼大师</strong><br><code>智为行本则行借智生 行能成智则智借行成</code><br>智慧是行动的根本，反过来，行动能成（我的理解是创造、完善）智慧。<br><br></p>
<p><strong>朱熹</strong><br><code>知之愈明则行之愈笃 行之愈笃则知之益明</code><br>朱文公讲的更进一步了。<br>知道的越明了，行动起来越切实。反过来，行动越切实，知道的更明了。<br>朱老爷子讲的太棒了。<br><br></p>
<p>不论是佛教大师，还是理学大师，他们都认识到：<br><code>知、行，是相辅相成的</code><br>知能指导行，行的反馈能不断完善知。</p>
<p>但很奇怪，至少对我来说是这样。我确确实实读懂了这些话，但还是陷入<br>不能行动起来的尴尬境遇。<br>到底问题出在哪？<br><br></p>
<h2 id="阳明心学-知行合一"><a href="#阳明心学-知行合一" class="headerlink" title="阳明心学 - 知行合一"></a>阳明心学 - 知行合一</h2><p>理解了知礼、朱熹的话，我也去努力实践了，但仍然没法做到 <code>行必笃</code> 。<br>工作中、生活中，总是会范同样的错误，被请教问题时，总会出现解释不清的情况。<br>这就像一个泥潭一样，没法脱身。</p>
<p>直到，我遇到了 <code>王阳明</code> ，我遇到了 <code>阳明心学</code> 。</p>
<p>有不少人认为王阳明被过度神话，但对我来说，他和他的心学确确实实是我前进道路<br>中出现的一盏明灯。<br>我的心不再浮躁，变得平和。<br>我渐渐忽略他人对我的看法，由他人审视，变为自我审视。<br>我的一切行动不再漫无目的，心不再变的不安。<br>我对他人、社会的看法甚至逐渐有了一种“上帝视角”。</p>
<p><strong>谁是圣人</strong><br>阳明龙场悟道，参悟：<br><code>圣人之道吾性具足 不假外求</code><br><code>向之求理于事物者误也</code><br>人人本身就具备成为圣人的品质，拿其他事物来衡量自己，谬误。</p>
<p>当时读到这句话，后背一凉，茅塞顿开。<br>我们一直都在跟别人比，从小的教育就是竞争，竞争，竞争。<br>我们成功的标杆永远是别人。</p>
<p>当我们看到其他人会这个，会那个，懂这个，懂那个时，总想着我不能被比下去，<br>我也要去学。<br>现在回想，这么做对绝大多数人是错误的：</p>
<ul>
<li>你想去学的时候，你是不是放下了手头正在做的事。<br>这些正在做的事，你做好了吗？你真的会了吗？下次再让你做，你会不犯错的<br>把它做好吗？<br>这些你正在做，需要做的都没有学会，都还只是半瓶醋，你就半途而废了！！！</li>
<li>不但上面的半途而废了，你羡慕其他人的，发誓要学的，最后你学到了吗？？？</li>
</ul>
<p>让我们换个视角。<br>站在旁边看自己做事的不再是别人（你的亲朋好友、你的同事领导），而是你自己。<br>想象一下，你灵魂脱壳，站在旁边审视你自己。<br>我现在做的好不好是由我自己决定的，我主宰我自己。</p>
<p><strong>知行合一</strong><br>当我做到，我就是圣人，我的人生由我自己主宰时。我的心里障碍已经完全不存在了。<br>我甚至开始以上帝视角观察这个社会，观察其他人。<br>我能做到专注于自己的事上，完全不被身边的环境干扰。那些干扰（同事的讨论等等）<br>逐渐逐渐被我漠视了。自身进入了一种 <code>心流</code> 模式。</p>
<p>当能做到这一步时，是时候谈谈阳明先生的 <code>知行合一</code> 了。</p>
<p>不论是佛学、理学，他们都把 <code>知</code> 和 <code>行</code> 分开了。<br><em>这也是我们始终做不到 <code>知</code> 的原因</em><br>我们付诸实践，完成了生活、工作中的任务，就认为自己懂了，已经知了。其实完全<br>没有到知的地步。你很可能只是在照猫画虎抄作业而已。<br>但我们总会给自己打上一个，这块我会了，的标签。<br>这个错觉是谁给的？行，给的。我以前做过，既然以前做过，这次我也会。很可能是<br>再抄一次作业。</p>
<p>问题到底在哪？再问一次自己。<br>是因为知、行分开了。</p>
<p>王阳明提出：<br><code>知之真切笃实处即是行 行之明觉精察处即是知 知行工夫本不可离</code></p>
<p>对知识了解的明明白白、分毫不差，那才是行。<br>要做到明明白白、分毫不差，你不去行是不可能呢。经历了很多行，才能做到分毫不差。<br>明觉精察，就是做事情，非常清晰，一丝不乱，能类似于本能了。<br>你仔细回想，当别人问你一个知识点时，你还需要想一想，那就是其实还没懂，似懂非懂！<br>你只有脱口而出，100%确定的讲出来，那才是懂。</p>
<p>这就是知行合一。</p>
<p>当我们能做到，做事处于 <code>心流</code> 模式，能做到 <code>自我审视</code> ，能坚定不渝的<br>完成每一个 <code>知行</code> ，能以 <code>上帝视角</code> 审视周遭。你会得到一种超然的感觉。</p>
]]></content>
      <categories>
        <category>阳明心学</category>
      </categories>
  </entry>
  <entry>
    <title>网站整合</title>
    <url>/2020/04/20/%E7%BD%91%E7%AB%99%E6%95%B4%E5%90%88/</url>
    <content><![CDATA[<p>一些很nice的网站，感谢所有为此付出的人们，向你们致敬！</p>
<a id="more"></a>

<h2 id="lookdiv-激活码"><a href="#lookdiv-激活码" class="headerlink" title="lookdiv-激活码"></a>lookdiv-激活码</h2><p><a href="http://lookdiv.com/" target="_blank" rel="noopener">lookdiv</a><br>我用来激活 <code>clion</code> ，但从网站说明上看，它所提供的激活码可以激活任何软件。<br>钥匙：<code>lookdiv</code><br>最新激活码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">E70JHCOV2H-eyJsaWNlbnNlSWQiOiJFNzBKSENPVjJIIiwibGljZW5zZWVOYW1lIjoi5bGx5Lic55CG5bel5aSn5a2mIiwiYXNzaWduZWVOYW1lIjoiIiwiYXNzaWduZWVFbWFpbCI6IiIsImxpY2Vuc2VSZXN0cmljdGlvbiI6IkZvciBlZHVjYXRpb25hbCB1c2Ugb25seSIsImNoZWNrQ29uY3VycmVudFVzZSI6ZmFsc2UsInByb2R1Y3RzIjpbeyJjb2RlIjoiSUkiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgifSx7ImNvZGUiOiJBQyIsInBhaWRVcFRvIjoiMjAyMS0wMi0xOCJ9LHsiY29kZSI6IkRQTiIsInBhaWRVcFRvIjoiMjAyMS0wMi0xOCJ9LHsiY29kZSI6IlBTIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4In0seyJjb2RlIjoiR08iLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgifSx7ImNvZGUiOiJETSIsInBhaWRVcFRvIjoiMjAyMS0wMi0xOCJ9LHsiY29kZSI6IkNMIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4In0seyJjb2RlIjoiUlMwIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4In0seyJjb2RlIjoiUkMiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgifSx7ImNvZGUiOiJSRCIsInBhaWRVcFRvIjoiMjAyMS0wMi0xOCJ9LHsiY29kZSI6IlBDIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4In0seyJjb2RlIjoiUk0iLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgifSx7ImNvZGUiOiJXUyIsInBhaWRVcFRvIjoiMjAyMS0wMi0xOCJ9LHsiY29kZSI6IkRCIiwicGFpZFVwVG8iOiIyMDIxLTAyLTE4In0seyJjb2RlIjoiREMiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgifSx7ImNvZGUiOiJSU1UiLCJwYWlkVXBUbyI6IjIwMjEtMDItMTgifV0sImhhc2giOiIxNjc5MTgwMy8wIiwiZ3JhY2VQZXJpb2REYXlzIjo3LCJhdXRvUHJvbG9uZ2F0ZWQiOmZhbHNlLCJpc0F1dG9Qcm9sb25nYXRlZCI6ZmFsc2V9-qlgtO4xVGHX&#x2F;r45fIKMaR6B9pWQtucrCYVsz0o00crcAiYN1k&#x2F;kSMygggYl187B0u0jeXQCe4BmQIItKL79x6NwoPn43inreVhZ88f4+Cbl+V&#x2F;KGeAYeybon+7YoTs8FY4+31ANW&#x2F;LwBPxkPnlErxYdQ6oc&#x2F;k6mnxIOm5Nf8WjKRfYYIl5Bhmdt1gHMGgFsocCcTLLiqDUGEcPj5tUIJXwwYaeKAR3YGXm&#x2F;P73QpnYR&#x2F;BcGaodBN3jprQRxsS5Ia5y06rrDAJcPSZuttAFpAit&#x2F;4o&#x2F;gq2XzhrjaBCtOMxNzk3XEAT82glTlWQOQx6KnRq6D7WUXzd81g44aP+Dca5Q&#x3D;&#x3D;-MIIElTCCAn2gAwIBAgIBCTANBgkqhkiG9w0BAQsFADAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBMB4XDTE4MTEwMTEyMjk0NloXDTIwMTEwMjEyMjk0NlowaDELMAkGA1UEBhMCQ1oxDjAMBgNVBAgMBU51c2xlMQ8wDQYDVQQHDAZQcmFndWUxGTAXBgNVBAoMEEpldEJyYWlucyBzLnIuby4xHTAbBgNVBAMMFHByb2QzeS1mcm9tLTIwMTgxMTAxMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAxcQkq+zdxlR2mmRYBPzGbUNdMN6OaXiXzxIWtMEkrJMO&#x2F;5oUfQJbLLuMSMK0QHFmaI37WShyxZcfRCidwXjot4zmNBKnlyHodDij&#x2F;78TmVqFl8nOeD5+07B8VEaIu7c3E1N+e1doC6wht4I4+IEmtsPAdoaj5WCQVQbrI8KeT8M9VcBIWX7fD0fhexfg3ZRt0xqwMcXGNp3DdJHiO0rCdU+Itv7EmtnSVq9jBG1usMSFvMowR25mju2JcPFp1+I4ZI+FqgR8gyG8oiNDyNEoAbsR3lOpI7grUYSvkB&#x2F;xVy&#x2F;VoklPCK2h0f0GJxFjnye8NT1PAywoyl7RmiAVRE&#x2F;EKwIDAQABo4GZMIGWMAkGA1UdEwQCMAAwHQYDVR0OBBYEFGEpG9oZGcfLMGNBkY7SgHiMGgTcMEgGA1UdIwRBMD+AFKOetkhnQhI2Qb1t4Lm0oFKLl&#x2F;GzoRykGjAYMRYwFAYDVQQDDA1KZXRQcm9maWxlIENBggkA0myxg7KDeeEwEwYDVR0lBAwwCgYIKwYBBQUHAwEwCwYDVR0PBAQDAgWgMA0GCSqGSIb3DQEBCwUAA4ICAQAF8uc+YJOHHwOFcPzmbjcxNDuGoOUIP+2h1R75Lecswb7ru2LWWSUMtXVKQzChLNPn&#x2F;72W0k+oI056tgiwuG7M49LXp4zQVlQnFmWU1wwGvVhq5R63Rpjx1zjGUhcXgayu7+9zMUW596Lbomsg8qVve6euqsrFicYkIIuUu4zYPndJwfe0YkS5nY72SHnNdbPhEnN8wcB2Kz+OIG0lih3yz5EqFhld03bGp222ZQCIghCTVL6QBNadGsiN&#x2F;lWLl4JdR3lJkZzlpFdiHijoVRdWeSWqM4y0t23c92HXKrgppoSV18XMxrWVdoSM3nuMHwxGhFyde05OdDtLpCv+jlWf5REAHHA201pAU6bJSZINyHDUTB+Beo28rRXSwSh3OUIvYwKNVeoBY+KwOJ7WnuTCUq1meE6GkKc4D&#x2F;cXmgpOyW&#x2F;1SmBz3XjVIi&#x2F;zprZ0zf3qH5mkphtg6ksjKgKjmx1cXfZAAX6wcDBNaCL+Ortep1Dh8xDUbqbBVNBL4jbiL3i3xsfNiyJgaZ5sX7i8tmStEpLbPwvHcByuf59qJhV&#x2F;bZOl8KqJBETCDJcY6O2aqhTUy+9x93ThKs1GKrRPePrWPluud7ttlgtRveit&#x2F;pcBrnQcXOl1rHq7ByB8CFAxNotRUYL9IF5n3wJOgkPojMy6jetQA5Ogc8Sm7RG6vg1yow&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>
<br>

<h2 id="不蒜子-极简网页计数器"><a href="#不蒜子-极简网页计数器" class="headerlink" title="不蒜子-极简网页计数器"></a>不蒜子-极简网页计数器</h2><p><a href="http://busuanzi.ibruce.info/" target="_blank" rel="noopener">不蒜子</a><br>本站的计数就是通过不蒜子的api实现的。<br><br></p>
<h2 id="比特虫-ico图标制作"><a href="#比特虫-ico图标制作" class="headerlink" title="比特虫-ico图标制作"></a>比特虫-ico图标制作</h2><p><a href="http://www.bitbug.net/" target="_blank" rel="noopener">比特虫</a><br>可以很方便的制作特定尺寸的图标。<br><br></p>
<h2 id="C语言中文网"><a href="#C语言中文网" class="headerlink" title="C语言中文网"></a>C语言中文网</h2><p><a href="http://c.biancheng.net/" target="_blank" rel="noopener">C语言中文网</a><br>整理的很好，绝大部分是收费内容，但不收费的部分也非常不错。<br><br></p>
]]></content>
      <categories>
        <category>tools</category>
      </categories>
  </entry>
  <entry>
    <title>软装清单</title>
    <url>/2020/07/26/%E8%BD%AF%E8%A3%85%E6%B8%85%E5%8D%95/</url>
    <content><![CDATA[<p>记录软装清单。</p>
<a id="more"></a>

<table>
<thead>
<tr>
<th>位置</th>
<th>型号规格</th>
<th>数量</th>
<th>单价</th>
<th>合计</th>
</tr>
</thead>
<tbody><tr>
<td>主卧</td>
<td>H-02 移门衣柜</td>
<td>1</td>
<td></td>
<td>12300</td>
</tr>
<tr>
<td>主卧</td>
<td>6605 床 1.8x2.0</td>
<td>1</td>
<td></td>
<td>6830</td>
</tr>
<tr>
<td>主卧</td>
<td>6501 床头柜</td>
<td>2</td>
<td>2370</td>
<td>4740</td>
</tr>
<tr>
<td>主卧</td>
<td>静睡床垫 1.8x2.0 2.3cm</td>
<td>1</td>
<td></td>
<td>6800</td>
</tr>
<tr>
<td>餐厅</td>
<td>H-02 长餐桌</td>
<td>1</td>
<td></td>
<td>5300</td>
</tr>
<tr>
<td>餐厅</td>
<td>6401 餐椅</td>
<td>6</td>
<td>1900</td>
<td>11400</td>
</tr>
<tr>
<td>客厅</td>
<td>H-06 客厅组合高柜</td>
<td>1</td>
<td></td>
<td>7500</td>
</tr>
<tr>
<td>客厅</td>
<td>H-06 客厅组合中柜</td>
<td>1</td>
<td></td>
<td>7250</td>
</tr>
<tr>
<td>客厅</td>
<td>6804-1 三人沙发</td>
<td>1</td>
<td></td>
<td>8550</td>
</tr>
<tr>
<td>客厅</td>
<td>6804-2 单人沙发</td>
<td>2</td>
<td>6300</td>
<td>12600</td>
</tr>
<tr>
<td>客厅</td>
<td>6209-1 茶几 1.5m</td>
<td>1</td>
<td></td>
<td>3680</td>
</tr>
<tr>
<td>书房</td>
<td>8612 写字台 1.4m</td>
<td>1</td>
<td></td>
<td>3250</td>
</tr>
<tr>
<td>书房</td>
<td>8602 四门书柜 1.7m</td>
<td>1</td>
<td></td>
<td>8500</td>
</tr>
<tr>
<td>书房</td>
<td>6409 餐椅</td>
<td>1</td>
<td></td>
<td>3680</td>
</tr>
<tr>
<td>北次</td>
<td>CH-9 皮床 1.5x2.0 低架</td>
<td>1</td>
<td></td>
<td>3980</td>
</tr>
<tr>
<td>北次</td>
<td>8211 床头柜</td>
<td>1</td>
<td></td>
<td>850</td>
</tr>
<tr>
<td>南次</td>
<td>8205 床 1.5x2.0</td>
<td>1</td>
<td></td>
<td>4980</td>
</tr>
<tr>
<td>南次</td>
<td>床头柜+四门衣柜 1.7m</td>
<td>1</td>
<td></td>
<td>11800</td>
</tr>
<tr>
<td>南北次</td>
<td>美睡床垫 1.5x2.0</td>
<td>2</td>
<td>2600</td>
<td>5200</td>
</tr>
<tr>
<td></td>
<td>-</td>
<td>-</td>
<td>-</td>
<td>129190</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>家</category>
      </categories>
  </entry>
</search>
